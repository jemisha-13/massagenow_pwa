/**
 * @fileoverview added by tsickle
 * Generated from: lib/utils/date-utils.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @type {?} */
export const LIMIT_TIMES = {
    minHour: 0,
    maxHour: 24,
    minMinute: 0,
    maxMinute: 60,
    minSecond: 0,
    maxSecond: 60,
    meridian: 12
};
/** @type {?} */
export const MERIDIANS = {
    AM: 'AM',
    PM: 'PM'
};
/** @type {?} */
export const DEFAULT_STEP = 1;
/** @type {?} */
export const DEFAULT_HOUR_PLACEHOLDER = '';
/** @type {?} */
export const DEFAULT_MINUTE_PLACEHOLDER = '';
/** @type {?} */
export const DEFAULT_SECOND_PLACEHOLDER = '';
/** @type {?} */
export const NUMERIC_REGEX = /[^0-9]/g;
/** @type {?} */
export const PATTERN_INPUT_HOUR = /^(2[0-3]|[0-1][0-9]|[0-9])$/;
/** @type {?} */
export const PATTERN_INPUT_MINUTE = /^([0-5][0-9]|[0-9])$/;
/** @type {?} */
export const PATTERN_INPUT_SECOND = /^([0-5][0-9]|[0-9])$/;
/**
 * @param {?} val
 * @return {?}
 */
export function formatTwoDigitTimeValue(val) {
    /** @type {?} */
    const txt = val.toString();
    return txt.length > 1 ? txt : `0${txt}`;
}
/**
 * @param {?} provider
 * @return {?}
 */
export function createMissingDateImplError(provider) {
    return Error(`MatDatepicker: No provider found for ${provider}. You must import one of the following ` +
        `modules at your application root: NgxMatNativeDateModule, NgxMatMomentModule, or provide a ` +
        `custom implementation.`);
}
/**
 * Formats a range of years.
 * @param {?} start
 * @param {?} end
 * @return {?}
 */
export function formatYearRange(start, end) {
    return `${start} \u2013 ${end}`;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGF0ZS11dGlscy5qcyIsInNvdXJjZVJvb3QiOiJuZzovL25neC1tYXQtZGF0ZXRpbWUtcGlja2VyLyIsInNvdXJjZXMiOlsibGliL3V0aWxzL2RhdGUtdXRpbHMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQUEsTUFBTSxPQUFPLFdBQVcsR0FBRztJQUN2QixPQUFPLEVBQUUsQ0FBQztJQUNWLE9BQU8sRUFBRSxFQUFFO0lBQ1gsU0FBUyxFQUFFLENBQUM7SUFDWixTQUFTLEVBQUUsRUFBRTtJQUNiLFNBQVMsRUFBRSxDQUFDO0lBQ1osU0FBUyxFQUFFLEVBQUU7SUFDYixRQUFRLEVBQUUsRUFBRTtDQUNmOztBQUVELE1BQU0sT0FBTyxTQUFTLEdBQUc7SUFDckIsRUFBRSxFQUFFLElBQUk7SUFDUixFQUFFLEVBQUUsSUFBSTtDQUNYOztBQUVELE1BQU0sT0FBTyxZQUFZLEdBQUcsQ0FBQzs7QUFDN0IsTUFBTSxPQUFPLHdCQUF3QixHQUFHLEVBQUU7O0FBQzFDLE1BQU0sT0FBTywwQkFBMEIsR0FBRyxFQUFFOztBQUM1QyxNQUFNLE9BQU8sMEJBQTBCLEdBQUcsRUFBRTs7QUFDNUMsTUFBTSxPQUFPLGFBQWEsR0FBRyxTQUFTOztBQUV0QyxNQUFNLE9BQU8sa0JBQWtCLEdBQUcsNkJBQTZCOztBQUMvRCxNQUFNLE9BQU8sb0JBQW9CLEdBQUcsc0JBQXNCOztBQUMxRCxNQUFNLE9BQU8sb0JBQW9CLEdBQUcsc0JBQXNCOzs7OztBQUUxRCxNQUFNLFVBQVUsdUJBQXVCLENBQUMsR0FBVzs7VUFDekMsR0FBRyxHQUFHLEdBQUcsQ0FBQyxRQUFRLEVBQUU7SUFDMUIsT0FBTyxHQUFHLENBQUMsTUFBTSxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxJQUFJLEdBQUcsRUFBRSxDQUFDO0FBQzVDLENBQUM7Ozs7O0FBRUQsTUFBTSxVQUFVLDBCQUEwQixDQUFDLFFBQWdCO0lBQ3ZELE9BQU8sS0FBSyxDQUNSLHdDQUF3QyxRQUFRLHlDQUF5QztRQUN6Riw2RkFBNkY7UUFDN0Ysd0JBQXdCLENBQUMsQ0FBQztBQUNsQyxDQUFDOzs7Ozs7O0FBR0QsTUFBTSxVQUFVLGVBQWUsQ0FBQyxLQUFhLEVBQUUsR0FBVztJQUN0RCxPQUFPLEdBQUcsS0FBSyxXQUFXLEdBQUcsRUFBRSxDQUFDO0FBQ3BDLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgY29uc3QgTElNSVRfVElNRVMgPSB7XHJcbiAgICBtaW5Ib3VyOiAwLFxyXG4gICAgbWF4SG91cjogMjQsXHJcbiAgICBtaW5NaW51dGU6IDAsXHJcbiAgICBtYXhNaW51dGU6IDYwLFxyXG4gICAgbWluU2Vjb25kOiAwLFxyXG4gICAgbWF4U2Vjb25kOiA2MCxcclxuICAgIG1lcmlkaWFuOiAxMlxyXG59XHJcblxyXG5leHBvcnQgY29uc3QgTUVSSURJQU5TID0ge1xyXG4gICAgQU06ICdBTScsXHJcbiAgICBQTTogJ1BNJ1xyXG59XHJcblxyXG5leHBvcnQgY29uc3QgREVGQVVMVF9TVEVQID0gMTtcclxuZXhwb3J0IGNvbnN0IERFRkFVTFRfSE9VUl9QTEFDRUhPTERFUiA9ICcnO1xyXG5leHBvcnQgY29uc3QgREVGQVVMVF9NSU5VVEVfUExBQ0VIT0xERVIgPSAnJztcclxuZXhwb3J0IGNvbnN0IERFRkFVTFRfU0VDT05EX1BMQUNFSE9MREVSID0gJyc7XHJcbmV4cG9ydCBjb25zdCBOVU1FUklDX1JFR0VYID0gL1teMC05XS9nO1xyXG5cclxuZXhwb3J0IGNvbnN0IFBBVFRFUk5fSU5QVVRfSE9VUiA9IC9eKDJbMC0zXXxbMC0xXVswLTldfFswLTldKSQvO1xyXG5leHBvcnQgY29uc3QgUEFUVEVSTl9JTlBVVF9NSU5VVEUgPSAvXihbMC01XVswLTldfFswLTldKSQvO1xyXG5leHBvcnQgY29uc3QgUEFUVEVSTl9JTlBVVF9TRUNPTkQgPSAvXihbMC01XVswLTldfFswLTldKSQvO1xyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIGZvcm1hdFR3b0RpZ2l0VGltZVZhbHVlKHZhbDogbnVtYmVyKSB7XHJcbiAgICBjb25zdCB0eHQgPSB2YWwudG9TdHJpbmcoKTtcclxuICAgIHJldHVybiB0eHQubGVuZ3RoID4gMSA/IHR4dCA6IGAwJHt0eHR9YDtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIGNyZWF0ZU1pc3NpbmdEYXRlSW1wbEVycm9yKHByb3ZpZGVyOiBzdHJpbmcpIHtcclxuICAgIHJldHVybiBFcnJvcihcclxuICAgICAgICBgTWF0RGF0ZXBpY2tlcjogTm8gcHJvdmlkZXIgZm91bmQgZm9yICR7cHJvdmlkZXJ9LiBZb3UgbXVzdCBpbXBvcnQgb25lIG9mIHRoZSBmb2xsb3dpbmcgYCArXHJcbiAgICAgICAgYG1vZHVsZXMgYXQgeW91ciBhcHBsaWNhdGlvbiByb290OiBOZ3hNYXROYXRpdmVEYXRlTW9kdWxlLCBOZ3hNYXRNb21lbnRNb2R1bGUsIG9yIHByb3ZpZGUgYSBgICtcclxuICAgICAgICBgY3VzdG9tIGltcGxlbWVudGF0aW9uLmApO1xyXG59XHJcblxyXG4vKiogRm9ybWF0cyBhIHJhbmdlIG9mIHllYXJzLiAqL1xyXG5leHBvcnQgZnVuY3Rpb24gZm9ybWF0WWVhclJhbmdlKHN0YXJ0OiBzdHJpbmcsIGVuZDogc3RyaW5nKTogc3RyaW5nIHtcclxuICAgIHJldHVybiBgJHtzdGFydH0gXFx1MjAxMyAke2VuZH1gO1xyXG59XHJcblxyXG4iXX0=