/**
 * @fileoverview added by tsickle
 * Generated from: lib/core/ngx-mat-date-adapter.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { DateAdapter } from '@angular/material/core';
/**
 * @abstract
 * @template D
 */
export class NgxMatDateAdapter extends DateAdapter {
    /**
     * Check if two date have same time
     * @param {?} a Date 1
     * @param {?} b Date 2
     * @return {?}
     */
    isSameTime(a, b) {
        if (a == null || b == null)
            return true;
        return this.getHour(a) === this.getHour(b)
            && this.getMinute(a) === this.getMinute(b)
            && this.getSecond(a) === this.getSecond(b);
    }
    /**
     * Copy time from a date to a another date
     * @param {?} toDate
     * @param {?} fromDate
     * @return {?}
     */
    copyTime(toDate, fromDate) {
        this.setHour(toDate, this.getHour(fromDate));
        this.setMinute(toDate, this.getMinute(fromDate));
        this.setSecond(toDate, this.getSecond(fromDate));
    }
    /**
     * Compares two dates.
     * @param {?} first The first date to compare.
     * @param {?} second The second date to compare.
     * @param {?=} showSeconds
     * @return {?} 0 if the dates are equal, a number less than 0 if the first date is earlier,
     *     a number greater than 0 if the first date is later.
     */
    compareDateWithTime(first, second, showSeconds) {
        /** @type {?} */
        let res = super.compareDate(first, second) ||
            this.getHour(first) - this.getHour(second) ||
            this.getMinute(first) - this.getMinute(second);
        if (showSeconds) {
            res = res || this.getSecond(first) - this.getSecond(second);
        }
        return res;
    }
}
if (false) {
    /**
     * Gets the hour component of the given date.
     * @abstract
     * @param {?} date The date to extract the month from.
     * @return {?} The hour component.
     */
    NgxMatDateAdapter.prototype.getHour = function (date) { };
    /**
     * Gets the minute component of the given date.
     * @abstract
     * @param {?} date The date to extract the month from.
     * @return {?} The minute component.
     */
    NgxMatDateAdapter.prototype.getMinute = function (date) { };
    /**
     * Gets the second component of the given date.
     * @abstract
     * @param {?} date The date to extract the month from.
     * @return {?} The second component.
     */
    NgxMatDateAdapter.prototype.getSecond = function (date) { };
    /**
     * Set the hour component of the given date.
     * @abstract
     * @param {?} date The date to extract the month from.
     * @param {?} value The value to set.
     * @return {?}
     */
    NgxMatDateAdapter.prototype.setHour = function (date, value) { };
    /**
     * Set the second component of the given date.
     * @abstract
     * @param {?} date The date to extract the month from.
     * @param {?} value The value to set.
     * @return {?}
     */
    NgxMatDateAdapter.prototype.setMinute = function (date, value) { };
    /**
     * Set the second component of the given date.
     * @abstract
     * @param {?} date The date to extract the month from.
     * @param {?} value The value to set.
     * @return {?}
     */
    NgxMatDateAdapter.prototype.setSecond = function (date, value) { };
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibmd4LW1hdC1kYXRlLWFkYXB0ZXIuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9uZ3gtbWF0LWRhdGV0aW1lLXBpY2tlci8iLCJzb3VyY2VzIjpbImxpYi9jb3JlL25neC1tYXQtZGF0ZS1hZGFwdGVyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7O0FBQUEsT0FBTyxFQUFFLFdBQVcsRUFBRSxNQUFNLHdCQUF3QixDQUFDOzs7OztBQUVyRCxNQUFNLE9BQWdCLGlCQUFxQixTQUFRLFdBQWM7Ozs7Ozs7SUFnRC9ELFVBQVUsQ0FBQyxDQUFJLEVBQUUsQ0FBSTtRQUNuQixJQUFJLENBQUMsSUFBSSxJQUFJLElBQUksQ0FBQyxJQUFJLElBQUk7WUFBRSxPQUFPLElBQUksQ0FBQztRQUN4QyxPQUFPLElBQUksQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLEtBQUssSUFBSSxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUM7ZUFDckMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsS0FBSyxJQUFJLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQztlQUN2QyxJQUFJLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxLQUFLLElBQUksQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFDL0MsQ0FBQzs7Ozs7OztJQU9ELFFBQVEsQ0FBQyxNQUFTLEVBQUUsUUFBVztRQUM3QixJQUFJLENBQUMsT0FBTyxDQUFDLE1BQU0sRUFBRSxJQUFJLENBQUMsT0FBTyxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUM7UUFDN0MsSUFBSSxDQUFDLFNBQVMsQ0FBQyxNQUFNLEVBQUUsSUFBSSxDQUFDLFNBQVMsQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDO1FBQ2pELElBQUksQ0FBQyxTQUFTLENBQUMsTUFBTSxFQUFFLElBQUksQ0FBQyxTQUFTLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQztJQUNuRCxDQUFDOzs7Ozs7Ozs7SUFTRCxtQkFBbUIsQ0FBQyxLQUFRLEVBQUUsTUFBUyxFQUFFLFdBQXFCOztZQUN4RCxHQUFHLEdBQUcsS0FBSyxDQUFDLFdBQVcsQ0FBQyxLQUFLLEVBQUUsTUFBTSxDQUFDO1lBQ3hDLElBQUksQ0FBQyxPQUFPLENBQUMsS0FBSyxDQUFDLEdBQUcsSUFBSSxDQUFDLE9BQU8sQ0FBQyxNQUFNLENBQUM7WUFDMUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxLQUFLLENBQUMsR0FBRyxJQUFJLENBQUMsU0FBUyxDQUFDLE1BQU0sQ0FBQztRQUNoRCxJQUFJLFdBQVcsRUFBRTtZQUNmLEdBQUcsR0FBRyxHQUFHLElBQUksSUFBSSxDQUFDLFNBQVMsQ0FBQyxLQUFLLENBQUMsR0FBRyxJQUFJLENBQUMsU0FBUyxDQUFDLE1BQU0sQ0FBQyxDQUFDO1NBQzdEO1FBQ0QsT0FBTyxHQUFHLENBQUM7SUFDYixDQUFDO0NBRUY7Ozs7Ozs7O0lBN0VDLDBEQUFrQzs7Ozs7OztJQU9sQyw0REFBb0M7Ozs7Ozs7SUFPcEMsNERBQW9DOzs7Ozs7OztJQU9wQyxpRUFBK0M7Ozs7Ozs7O0lBTy9DLG1FQUFpRDs7Ozs7Ozs7SUFPakQsbUVBQWlEIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgRGF0ZUFkYXB0ZXIgfSBmcm9tICdAYW5ndWxhci9tYXRlcmlhbC9jb3JlJztcclxuXHJcbmV4cG9ydCBhYnN0cmFjdCBjbGFzcyBOZ3hNYXREYXRlQWRhcHRlcjxEPiBleHRlbmRzIERhdGVBZGFwdGVyPEQ+IHtcclxuICAvKipcclxuICogR2V0cyB0aGUgaG91ciBjb21wb25lbnQgb2YgdGhlIGdpdmVuIGRhdGUuXHJcbiAqIEBwYXJhbSBkYXRlIFRoZSBkYXRlIHRvIGV4dHJhY3QgdGhlIG1vbnRoIGZyb20uXHJcbiAqIEByZXR1cm5zIFRoZSBob3VyIGNvbXBvbmVudC5cclxuICovXHJcbiAgYWJzdHJhY3QgZ2V0SG91cihkYXRlOiBEKTogbnVtYmVyO1xyXG5cclxuICAvKipcclxuKiBHZXRzIHRoZSBtaW51dGUgY29tcG9uZW50IG9mIHRoZSBnaXZlbiBkYXRlLlxyXG4qIEBwYXJhbSBkYXRlIFRoZSBkYXRlIHRvIGV4dHJhY3QgdGhlIG1vbnRoIGZyb20uXHJcbiogQHJldHVybnMgVGhlIG1pbnV0ZSBjb21wb25lbnQuXHJcbiovXHJcbiAgYWJzdHJhY3QgZ2V0TWludXRlKGRhdGU6IEQpOiBudW1iZXI7XHJcblxyXG4gIC8qKlxyXG4gICogR2V0cyB0aGUgc2Vjb25kIGNvbXBvbmVudCBvZiB0aGUgZ2l2ZW4gZGF0ZS5cclxuICAqIEBwYXJhbSBkYXRlIFRoZSBkYXRlIHRvIGV4dHJhY3QgdGhlIG1vbnRoIGZyb20uXHJcbiAgKiBAcmV0dXJucyBUaGUgc2Vjb25kIGNvbXBvbmVudC5cclxuICAqL1xyXG4gIGFic3RyYWN0IGdldFNlY29uZChkYXRlOiBEKTogbnVtYmVyO1xyXG5cclxuICAvKipcclxuICAqIFNldCB0aGUgaG91ciBjb21wb25lbnQgb2YgdGhlIGdpdmVuIGRhdGUuXHJcbiAgKiBAcGFyYW0gZGF0ZSBUaGUgZGF0ZSB0byBleHRyYWN0IHRoZSBtb250aCBmcm9tLlxyXG4gICogQHBhcmFtIHZhbHVlIFRoZSB2YWx1ZSB0byBzZXQuXHJcbiAgKi9cclxuICBhYnN0cmFjdCBzZXRIb3VyKGRhdGU6IEQsIHZhbHVlOiBudW1iZXIpOiB2b2lkO1xyXG5cclxuICAvKipcclxuICAqIFNldCB0aGUgc2Vjb25kIGNvbXBvbmVudCBvZiB0aGUgZ2l2ZW4gZGF0ZS5cclxuICAqIEBwYXJhbSBkYXRlIFRoZSBkYXRlIHRvIGV4dHJhY3QgdGhlIG1vbnRoIGZyb20uXHJcbiAgKiBAcGFyYW0gdmFsdWUgVGhlIHZhbHVlIHRvIHNldC5cclxuICAqL1xyXG4gIGFic3RyYWN0IHNldE1pbnV0ZShkYXRlOiBELCB2YWx1ZTogbnVtYmVyKTogdm9pZDtcclxuXHJcbiAgLyoqXHJcbiAgICogU2V0IHRoZSBzZWNvbmQgY29tcG9uZW50IG9mIHRoZSBnaXZlbiBkYXRlLlxyXG4gICAqIEBwYXJhbSBkYXRlIFRoZSBkYXRlIHRvIGV4dHJhY3QgdGhlIG1vbnRoIGZyb20uXHJcbiAgICogQHBhcmFtIHZhbHVlIFRoZSB2YWx1ZSB0byBzZXQuXHJcbiAgICovXHJcbiAgYWJzdHJhY3Qgc2V0U2Vjb25kKGRhdGU6IEQsIHZhbHVlOiBudW1iZXIpOiB2b2lkO1xyXG5cclxuICAvKipcclxuICAgKiBDaGVjayBpZiB0d28gZGF0ZSBoYXZlIHNhbWUgdGltZVxyXG4gICAqIEBwYXJhbSBhIERhdGUgMVxyXG4gICAqIEBwYXJhbSBiIERhdGUgMlxyXG4gICAqL1xyXG4gIGlzU2FtZVRpbWUoYTogRCwgYjogRCk6IGJvb2xlYW4ge1xyXG4gICAgaWYgKGEgPT0gbnVsbCB8fCBiID09IG51bGwpIHJldHVybiB0cnVlO1xyXG4gICAgcmV0dXJuIHRoaXMuZ2V0SG91cihhKSA9PT0gdGhpcy5nZXRIb3VyKGIpXHJcbiAgICAgICYmIHRoaXMuZ2V0TWludXRlKGEpID09PSB0aGlzLmdldE1pbnV0ZShiKVxyXG4gICAgICAmJiB0aGlzLmdldFNlY29uZChhKSA9PT0gdGhpcy5nZXRTZWNvbmQoYik7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBDb3B5IHRpbWUgZnJvbSBhIGRhdGUgdG8gYSBhbm90aGVyIGRhdGVcclxuICAgKiBAcGFyYW0gdG9EYXRlIFxyXG4gICAqIEBwYXJhbSBmcm9tRGF0ZSBcclxuICAgKi9cclxuICBjb3B5VGltZSh0b0RhdGU6IEQsIGZyb21EYXRlOiBEKSB7XHJcbiAgICB0aGlzLnNldEhvdXIodG9EYXRlLCB0aGlzLmdldEhvdXIoZnJvbURhdGUpKTtcclxuICAgIHRoaXMuc2V0TWludXRlKHRvRGF0ZSwgdGhpcy5nZXRNaW51dGUoZnJvbURhdGUpKTtcclxuICAgIHRoaXMuc2V0U2Vjb25kKHRvRGF0ZSwgdGhpcy5nZXRTZWNvbmQoZnJvbURhdGUpKTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gKiBDb21wYXJlcyB0d28gZGF0ZXMuXHJcbiAqIEBwYXJhbSBmaXJzdCBUaGUgZmlyc3QgZGF0ZSB0byBjb21wYXJlLlxyXG4gKiBAcGFyYW0gc2Vjb25kIFRoZSBzZWNvbmQgZGF0ZSB0byBjb21wYXJlLlxyXG4gKiBAcmV0dXJucyAwIGlmIHRoZSBkYXRlcyBhcmUgZXF1YWwsIGEgbnVtYmVyIGxlc3MgdGhhbiAwIGlmIHRoZSBmaXJzdCBkYXRlIGlzIGVhcmxpZXIsXHJcbiAqICAgICBhIG51bWJlciBncmVhdGVyIHRoYW4gMCBpZiB0aGUgZmlyc3QgZGF0ZSBpcyBsYXRlci5cclxuICovXHJcbiAgY29tcGFyZURhdGVXaXRoVGltZShmaXJzdDogRCwgc2Vjb25kOiBELCBzaG93U2Vjb25kcz86IGJvb2xlYW4pOiBudW1iZXIge1xyXG4gICAgbGV0IHJlcyA9IHN1cGVyLmNvbXBhcmVEYXRlKGZpcnN0LCBzZWNvbmQpIHx8XHJcbiAgICAgIHRoaXMuZ2V0SG91cihmaXJzdCkgLSB0aGlzLmdldEhvdXIoc2Vjb25kKSB8fFxyXG4gICAgICB0aGlzLmdldE1pbnV0ZShmaXJzdCkgLSB0aGlzLmdldE1pbnV0ZShzZWNvbmQpO1xyXG4gICAgaWYgKHNob3dTZWNvbmRzKSB7XHJcbiAgICAgIHJlcyA9IHJlcyB8fCB0aGlzLmdldFNlY29uZChmaXJzdCkgLSB0aGlzLmdldFNlY29uZChzZWNvbmQpO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIHJlcztcclxuICB9XHJcblxyXG59XHJcbiJdfQ==