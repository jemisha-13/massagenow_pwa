import { NgModule } from '@angular/core';
import { StripeCardComponent } from './components/card.component';
import { StripeCardNumberComponent } from './components/card-number.component';
import { StripeCardExpiryComponent } from './components/card-expiry.component';
import { StripeCardCvcComponent } from './components/card-cvc.component';
import { StripeFpxBankComponent } from './components/fpx-bank.component';
import { StripeIdealBankComponent } from './components/ideal-bank.component';
import { StripeIbanComponent } from './components/iban.component';
import { StripeAuBankAccountComponent } from './components/au-bank-account.component';
import { StripePaymentRequestButtonComponent } from './components/payment-request-button.component';
import { StripeCardGroupDirective } from './directives/card-group.directive';
import { STRIPE_OPTIONS, STRIPE_PUBLISHABLE_KEY } from './interfaces/ngx-stripe.interface';
import { LazyStripeAPILoader } from './services/api-loader.service';
import { WindowRef } from './services/window-ref.service';
import { DocumentRef } from './services/document-ref.service';
import { StripeService } from './services/stripe.service';
import { StripeFactoryService } from './services/stripe-factory.service';
import { StripeElementsService } from './services/stripe-elements.service';
import * as ɵngcc0 from '@angular/core';
const components = [
    StripeCardComponent,
    StripeCardNumberComponent,
    StripeCardExpiryComponent,
    StripeCardCvcComponent,
    StripeFpxBankComponent,
    StripeIdealBankComponent,
    StripeIbanComponent,
    StripeAuBankAccountComponent,
    StripePaymentRequestButtonComponent
];
const directives = [StripeCardGroupDirective];
export class NgxStripeModule {
    static forRoot(publishableKey, options) {
        return {
            ngModule: NgxStripeModule,
            providers: [
                LazyStripeAPILoader,
                StripeService,
                StripeFactoryService,
                StripeElementsService,
                WindowRef,
                DocumentRef,
                {
                    provide: STRIPE_PUBLISHABLE_KEY,
                    useValue: publishableKey
                },
                {
                    provide: STRIPE_OPTIONS,
                    useValue: options
                }
            ]
        };
    }
    static forChild(publishableKey, options) {
        return {
            ngModule: NgxStripeModule,
            providers: [
                LazyStripeAPILoader,
                StripeService,
                StripeFactoryService,
                StripeElementsService,
                WindowRef,
                DocumentRef,
                {
                    provide: STRIPE_PUBLISHABLE_KEY,
                    useValue: publishableKey
                },
                {
                    provide: STRIPE_OPTIONS,
                    useValue: options
                }
            ]
        };
    }
}
NgxStripeModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: NgxStripeModule });
NgxStripeModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function NgxStripeModule_Factory(t) { return new (t || NgxStripeModule)(); } });
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(NgxStripeModule, { declarations: [StripeCardComponent,
        StripeCardNumberComponent,
        StripeCardExpiryComponent,
        StripeCardCvcComponent,
        StripeFpxBankComponent,
        StripeIdealBankComponent,
        StripeIbanComponent,
        StripeAuBankAccountComponent,
        StripePaymentRequestButtonComponent, StripeCardGroupDirective], exports: [StripeCardComponent,
        StripeCardNumberComponent,
        StripeCardExpiryComponent,
        StripeCardCvcComponent,
        StripeFpxBankComponent,
        StripeIdealBankComponent,
        StripeIbanComponent,
        StripeAuBankAccountComponent,
        StripePaymentRequestButtonComponent, StripeCardGroupDirective] }); })();
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(NgxStripeModule, [{
        type: NgModule,
        args: [{
                declarations: [...components, ...directives],
                exports: [...components, ...directives]
            }]
    }], null, null); })();

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibmd4LXN0cmlwZS5tb2R1bGUuanMiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3Byb2plY3RzL25neC1zdHJpcGUvc3JjL2xpYi9uZ3gtc3RyaXBlLm1vZHVsZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQXVCLFFBQVEsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUk5RCxPQUFPLEVBQUUsbUJBQW1CLEVBQUUsTUFBTSw2QkFBNkIsQ0FBQztBQUNsRSxPQUFPLEVBQUUseUJBQXlCLEVBQUUsTUFBTSxvQ0FBb0MsQ0FBQztBQUMvRSxPQUFPLEVBQUUseUJBQXlCLEVBQUUsTUFBTSxvQ0FBb0MsQ0FBQztBQUMvRSxPQUFPLEVBQUUsc0JBQXNCLEVBQUUsTUFBTSxpQ0FBaUMsQ0FBQztBQUN6RSxPQUFPLEVBQUUsc0JBQXNCLEVBQUUsTUFBTSxpQ0FBaUMsQ0FBQztBQUN6RSxPQUFPLEVBQUUsd0JBQXdCLEVBQUUsTUFBTSxtQ0FBbUMsQ0FBQztBQUM3RSxPQUFPLEVBQUUsbUJBQW1CLEVBQUUsTUFBTSw2QkFBNkIsQ0FBQztBQUNsRSxPQUFPLEVBQUUsNEJBQTRCLEVBQUUsTUFBTSx3Q0FBd0MsQ0FBQztBQUN0RixPQUFPLEVBQUUsbUNBQW1DLEVBQUUsTUFBTSwrQ0FBK0MsQ0FBQztBQUVwRyxPQUFPLEVBQUUsd0JBQXdCLEVBQUUsTUFBTSxtQ0FBbUMsQ0FBQztBQUU3RSxPQUFPLEVBQ0wsY0FBYyxFQUNkLHNCQUFzQixFQUN2QixNQUFNLG1DQUFtQyxDQUFDO0FBRTNDLE9BQU8sRUFBRSxtQkFBbUIsRUFBRSxNQUFNLCtCQUErQixDQUFDO0FBQ3BFLE9BQU8sRUFBRSxTQUFTLEVBQUUsTUFBTSwrQkFBK0IsQ0FBQztBQUMxRCxPQUFPLEVBQUUsV0FBVyxFQUFFLE1BQU0saUNBQWlDLENBQUM7QUFDOUQsT0FBTyxFQUFFLGFBQWEsRUFBRSxNQUFNLDJCQUEyQixDQUFDO0FBQzFELE9BQU8sRUFBRSxvQkFBb0IsRUFBRSxNQUFNLG1DQUFtQyxDQUFDO0FBQ3pFLE9BQU8sRUFBRSxxQkFBcUIsRUFBRSxNQUFNLG9DQUFvQyxDQUFDOztBQUUzRSxNQUFNLFVBQVUsR0FBRztBQUNuQixJQUFFLG1CQUFtQjtBQUNyQixJQUFFLHlCQUF5QjtBQUMzQixJQUFFLHlCQUF5QjtBQUMzQixJQUFFLHNCQUFzQjtBQUN4QixJQUFFLHNCQUFzQjtBQUN4QixJQUFFLHdCQUF3QjtBQUMxQixJQUFFLG1CQUFtQjtBQUNyQixJQUFFLDRCQUE0QjtBQUM5QixJQUFFLG1DQUFtQztBQUNyQyxDQUFDLENBQUM7QUFFRixNQUFNLFVBQVUsR0FBRyxDQUFDLHdCQUF3QixDQUFDLENBQUM7QUFNOUMsTUFBTSxPQUFPLGVBQWU7QUFDNUIsSUFBUyxNQUFNLENBQUMsT0FBTyxDQUNuQixjQUF1QixFQUN2QixPQUFrQztBQUNuQyxRQUNDLE9BQU87QUFDWCxZQUFNLFFBQVEsRUFBRSxlQUFlO0FBQy9CLFlBQU0sU0FBUyxFQUFFO0FBQ2pCLGdCQUFRLG1CQUFtQjtBQUMzQixnQkFBUSxhQUFhO0FBQ3JCLGdCQUFRLG9CQUFvQjtBQUM1QixnQkFBUSxxQkFBcUI7QUFDN0IsZ0JBQVEsU0FBUztBQUNqQixnQkFBUSxXQUFXO0FBQ25CLGdCQUFRO0FBQ1Isb0JBQVUsT0FBTyxFQUFFLHNCQUFzQjtBQUN6QyxvQkFBVSxRQUFRLEVBQUUsY0FBYztBQUNsQyxpQkFBUztBQUNULGdCQUFRO0FBQ1Isb0JBQVUsT0FBTyxFQUFFLGNBQWM7QUFDakMsb0JBQVUsUUFBUSxFQUFFLE9BQU87QUFDM0IsaUJBQVM7QUFDVCxhQUFPO0FBQ1AsU0FBSyxDQUFDO0FBQ04sSUFBRSxDQUFDO0FBQ0gsSUFDUyxNQUFNLENBQUMsUUFBUSxDQUNwQixjQUF1QixFQUN2QixPQUFrQztBQUNuQyxRQUNDLE9BQU87QUFDWCxZQUFNLFFBQVEsRUFBRSxlQUFlO0FBQy9CLFlBQU0sU0FBUyxFQUFFO0FBQ2pCLGdCQUFRLG1CQUFtQjtBQUMzQixnQkFBUSxhQUFhO0FBQ3JCLGdCQUFRLG9CQUFvQjtBQUM1QixnQkFBUSxxQkFBcUI7QUFDN0IsZ0JBQVEsU0FBUztBQUNqQixnQkFBUSxXQUFXO0FBQ25CLGdCQUFRO0FBQ1Isb0JBQVUsT0FBTyxFQUFFLHNCQUFzQjtBQUN6QyxvQkFBVSxRQUFRLEVBQUUsY0FBYztBQUNsQyxpQkFBUztBQUNULGdCQUFRO0FBQ1Isb0JBQVUsT0FBTyxFQUFFLGNBQWM7QUFDakMsb0JBQVUsUUFBUSxFQUFFLE9BQU87QUFDM0IsaUJBQVM7QUFDVCxhQUFPO0FBQ1AsU0FBSyxDQUFDO0FBQ04sSUFBRSxDQUFDO0FBQ0g7MkNBdERDLFFBQVEsU0FBQztHQUNSLFlBQVksRUFBRSxDQUFDLEdBQUcsVUFBVSxFQUFFLEdBQUcsVUFBVSxDQUFDLGtCQUM1QyxPQUFPLEVBQUUsQ0FBQyxHQUFHLFVBQVUsRUFBRSxHQUFHLFVBQVUsQ0FBQyxjQUN4Qzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OzBCQUNJO0FBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBNb2R1bGVXaXRoUHJvdmlkZXJzLCBOZ01vZHVsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuXG5pbXBvcnQgeyBTdHJpcGVDb25zdHJ1Y3Rvck9wdGlvbnMgfSBmcm9tICdAc3RyaXBlL3N0cmlwZS1qcyc7XG5cbmltcG9ydCB7IFN0cmlwZUNhcmRDb21wb25lbnQgfSBmcm9tICcuL2NvbXBvbmVudHMvY2FyZC5jb21wb25lbnQnO1xuaW1wb3J0IHsgU3RyaXBlQ2FyZE51bWJlckNvbXBvbmVudCB9IGZyb20gJy4vY29tcG9uZW50cy9jYXJkLW51bWJlci5jb21wb25lbnQnO1xuaW1wb3J0IHsgU3RyaXBlQ2FyZEV4cGlyeUNvbXBvbmVudCB9IGZyb20gJy4vY29tcG9uZW50cy9jYXJkLWV4cGlyeS5jb21wb25lbnQnO1xuaW1wb3J0IHsgU3RyaXBlQ2FyZEN2Y0NvbXBvbmVudCB9IGZyb20gJy4vY29tcG9uZW50cy9jYXJkLWN2Yy5jb21wb25lbnQnO1xuaW1wb3J0IHsgU3RyaXBlRnB4QmFua0NvbXBvbmVudCB9IGZyb20gJy4vY29tcG9uZW50cy9mcHgtYmFuay5jb21wb25lbnQnO1xuaW1wb3J0IHsgU3RyaXBlSWRlYWxCYW5rQ29tcG9uZW50IH0gZnJvbSAnLi9jb21wb25lbnRzL2lkZWFsLWJhbmsuY29tcG9uZW50JztcbmltcG9ydCB7IFN0cmlwZUliYW5Db21wb25lbnQgfSBmcm9tICcuL2NvbXBvbmVudHMvaWJhbi5jb21wb25lbnQnO1xuaW1wb3J0IHsgU3RyaXBlQXVCYW5rQWNjb3VudENvbXBvbmVudCB9IGZyb20gJy4vY29tcG9uZW50cy9hdS1iYW5rLWFjY291bnQuY29tcG9uZW50JztcbmltcG9ydCB7IFN0cmlwZVBheW1lbnRSZXF1ZXN0QnV0dG9uQ29tcG9uZW50IH0gZnJvbSAnLi9jb21wb25lbnRzL3BheW1lbnQtcmVxdWVzdC1idXR0b24uY29tcG9uZW50JztcblxuaW1wb3J0IHsgU3RyaXBlQ2FyZEdyb3VwRGlyZWN0aXZlIH0gZnJvbSAnLi9kaXJlY3RpdmVzL2NhcmQtZ3JvdXAuZGlyZWN0aXZlJztcblxuaW1wb3J0IHtcbiAgU1RSSVBFX09QVElPTlMsXG4gIFNUUklQRV9QVUJMSVNIQUJMRV9LRVlcbn0gZnJvbSAnLi9pbnRlcmZhY2VzL25neC1zdHJpcGUuaW50ZXJmYWNlJztcblxuaW1wb3J0IHsgTGF6eVN0cmlwZUFQSUxvYWRlciB9IGZyb20gJy4vc2VydmljZXMvYXBpLWxvYWRlci5zZXJ2aWNlJztcbmltcG9ydCB7IFdpbmRvd1JlZiB9IGZyb20gJy4vc2VydmljZXMvd2luZG93LXJlZi5zZXJ2aWNlJztcbmltcG9ydCB7IERvY3VtZW50UmVmIH0gZnJvbSAnLi9zZXJ2aWNlcy9kb2N1bWVudC1yZWYuc2VydmljZSc7XG5pbXBvcnQgeyBTdHJpcGVTZXJ2aWNlIH0gZnJvbSAnLi9zZXJ2aWNlcy9zdHJpcGUuc2VydmljZSc7XG5pbXBvcnQgeyBTdHJpcGVGYWN0b3J5U2VydmljZSB9IGZyb20gJy4vc2VydmljZXMvc3RyaXBlLWZhY3Rvcnkuc2VydmljZSc7XG5pbXBvcnQgeyBTdHJpcGVFbGVtZW50c1NlcnZpY2UgfSBmcm9tICcuL3NlcnZpY2VzL3N0cmlwZS1lbGVtZW50cy5zZXJ2aWNlJztcblxuY29uc3QgY29tcG9uZW50cyA9IFtcbiAgU3RyaXBlQ2FyZENvbXBvbmVudCxcbiAgU3RyaXBlQ2FyZE51bWJlckNvbXBvbmVudCxcbiAgU3RyaXBlQ2FyZEV4cGlyeUNvbXBvbmVudCxcbiAgU3RyaXBlQ2FyZEN2Y0NvbXBvbmVudCxcbiAgU3RyaXBlRnB4QmFua0NvbXBvbmVudCxcbiAgU3RyaXBlSWRlYWxCYW5rQ29tcG9uZW50LFxuICBTdHJpcGVJYmFuQ29tcG9uZW50LFxuICBTdHJpcGVBdUJhbmtBY2NvdW50Q29tcG9uZW50LFxuICBTdHJpcGVQYXltZW50UmVxdWVzdEJ1dHRvbkNvbXBvbmVudFxuXTtcblxuY29uc3QgZGlyZWN0aXZlcyA9IFtTdHJpcGVDYXJkR3JvdXBEaXJlY3RpdmVdO1xuXG5ATmdNb2R1bGUoe1xuICBkZWNsYXJhdGlvbnM6IFsuLi5jb21wb25lbnRzLCAuLi5kaXJlY3RpdmVzXSxcbiAgZXhwb3J0czogWy4uLmNvbXBvbmVudHMsIC4uLmRpcmVjdGl2ZXNdXG59KVxuZXhwb3J0IGNsYXNzIE5neFN0cmlwZU1vZHVsZSB7XG4gIHB1YmxpYyBzdGF0aWMgZm9yUm9vdChcbiAgICBwdWJsaXNoYWJsZUtleT86IHN0cmluZyxcbiAgICBvcHRpb25zPzogU3RyaXBlQ29uc3RydWN0b3JPcHRpb25zXG4gICk6IE1vZHVsZVdpdGhQcm92aWRlcnM8Tmd4U3RyaXBlTW9kdWxlPiB7XG4gICAgcmV0dXJuIHtcbiAgICAgIG5nTW9kdWxlOiBOZ3hTdHJpcGVNb2R1bGUsXG4gICAgICBwcm92aWRlcnM6IFtcbiAgICAgICAgTGF6eVN0cmlwZUFQSUxvYWRlcixcbiAgICAgICAgU3RyaXBlU2VydmljZSxcbiAgICAgICAgU3RyaXBlRmFjdG9yeVNlcnZpY2UsXG4gICAgICAgIFN0cmlwZUVsZW1lbnRzU2VydmljZSxcbiAgICAgICAgV2luZG93UmVmLFxuICAgICAgICBEb2N1bWVudFJlZixcbiAgICAgICAge1xuICAgICAgICAgIHByb3ZpZGU6IFNUUklQRV9QVUJMSVNIQUJMRV9LRVksXG4gICAgICAgICAgdXNlVmFsdWU6IHB1Ymxpc2hhYmxlS2V5XG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICBwcm92aWRlOiBTVFJJUEVfT1BUSU9OUyxcbiAgICAgICAgICB1c2VWYWx1ZTogb3B0aW9uc1xuICAgICAgICB9XG4gICAgICBdXG4gICAgfTtcbiAgfVxuXG4gIHB1YmxpYyBzdGF0aWMgZm9yQ2hpbGQoXG4gICAgcHVibGlzaGFibGVLZXk/OiBzdHJpbmcsXG4gICAgb3B0aW9ucz86IFN0cmlwZUNvbnN0cnVjdG9yT3B0aW9uc1xuICApOiBNb2R1bGVXaXRoUHJvdmlkZXJzPE5neFN0cmlwZU1vZHVsZT4ge1xuICAgIHJldHVybiB7XG4gICAgICBuZ01vZHVsZTogTmd4U3RyaXBlTW9kdWxlLFxuICAgICAgcHJvdmlkZXJzOiBbXG4gICAgICAgIExhenlTdHJpcGVBUElMb2FkZXIsXG4gICAgICAgIFN0cmlwZVNlcnZpY2UsXG4gICAgICAgIFN0cmlwZUZhY3RvcnlTZXJ2aWNlLFxuICAgICAgICBTdHJpcGVFbGVtZW50c1NlcnZpY2UsXG4gICAgICAgIFdpbmRvd1JlZixcbiAgICAgICAgRG9jdW1lbnRSZWYsXG4gICAgICAgIHtcbiAgICAgICAgICBwcm92aWRlOiBTVFJJUEVfUFVCTElTSEFCTEVfS0VZLFxuICAgICAgICAgIHVzZVZhbHVlOiBwdWJsaXNoYWJsZUtleVxuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgcHJvdmlkZTogU1RSSVBFX09QVElPTlMsXG4gICAgICAgICAgdXNlVmFsdWU6IG9wdGlvbnNcbiAgICAgICAgfVxuICAgICAgXVxuICAgIH07XG4gIH1cbn1cbiJdfQ==