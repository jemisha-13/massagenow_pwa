import { __awaiter } from "tslib";
import { Component, Input, ViewChild, EventEmitter, Output, Optional } from '@angular/core';
import { StripeCardGroupDirective } from '../directives/card-group.directive';
import { StripeElementsService } from '../services/stripe-elements.service';
import * as ɵngcc0 from '@angular/core';

const _c0 = ["stripeElementRef"];
export class StripeCardExpiryComponent {
    constructor(stripeElementsService, cardGroup) {
        this.stripeElementsService = stripeElementsService;
        this.cardGroup = cardGroup;
        this.load = new EventEmitter();
        this.blur = new EventEmitter();
        this.change = new EventEmitter();
        this.focus = new EventEmitter();
        this.ready = new EventEmitter();
        this.escape = new EventEmitter();
    }
    ngOnChanges(changes) {
        return __awaiter(this, void 0, void 0, function* () {
            if (changes.options || changes.containerClass) {
                this.setupElement('options');
            }
        });
    }
    ngOnInit() {
        if (this.cardGroup) {
            this.cardGroupSubscription = this.cardGroup.elements.subscribe((elements) => {
                this.elements = elements;
                this.setupElement('elements');
            });
        }
        else {
            throw new Error('StripeCardExpiryComponent must have StripeCardGroupDirective parent');
        }
    }
    ngOnDestroy() {
        if (this.element) {
            this.element.destroy();
        }
        if (this.cardGroupSubscription) {
            this.cardGroupSubscription.unsubscribe();
        }
    }
    update(options) {
        this.element.update(options);
    }
    /**
     * @deprecated
     */
    getCardExpiry() {
        return this.element;
    }
    setupElement(source) {
        const options = this.stripeElementsService.mergeOptions(this.options, this.containerClass);
        if (this.element && source === 'options') {
            this.update(options);
        }
        else if (this.elements && source === 'elements') {
            this.element = this.elements.create('cardExpiry', options);
            this.element.on('change', (ev) => this.change.emit(ev));
            this.element.on('blur', () => this.blur.emit());
            this.element.on('focus', () => this.focus.emit());
            this.element.on('ready', () => this.ready.emit());
            this.element.on('escape', () => this.escape.emit());
            this.element.mount(this.stripeElementRef.nativeElement);
            this.load.emit(this.element);
        }
    }
}
StripeCardExpiryComponent.ɵfac = function StripeCardExpiryComponent_Factory(t) { return new (t || StripeCardExpiryComponent)(ɵngcc0.ɵɵdirectiveInject(StripeElementsService), ɵngcc0.ɵɵdirectiveInject(StripeCardGroupDirective, 8)); };
StripeCardExpiryComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: StripeCardExpiryComponent, selectors: [["ngx-stripe-card-expiry"]], viewQuery: function StripeCardExpiryComponent_Query(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵviewQuery(_c0, true);
    } if (rf & 2) {
        var _t;
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.stripeElementRef = _t.first);
    } }, inputs: { containerClass: "containerClass", options: "options" }, outputs: { load: "load", blur: "blur", change: "change", focus: "focus", ready: "ready", escape: "escape" }, features: [ɵngcc0.ɵɵNgOnChangesFeature], decls: 2, vars: 0, consts: [[1, "field"], ["stripeElementRef", ""]], template: function StripeCardExpiryComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵelement(0, "div", 0, 1);
    } }, encapsulation: 2 });
StripeCardExpiryComponent.ctorParameters = () => [
    { type: StripeElementsService },
    { type: StripeCardGroupDirective, decorators: [{ type: Optional }] }
];
StripeCardExpiryComponent.propDecorators = {
    stripeElementRef: [{ type: ViewChild, args: ['stripeElementRef',] }],
    containerClass: [{ type: Input }],
    options: [{ type: Input }],
    load: [{ type: Output }],
    blur: [{ type: Output }],
    change: [{ type: Output }],
    focus: [{ type: Output }],
    ready: [{ type: Output }],
    escape: [{ type: Output }]
};
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(StripeCardExpiryComponent, [{
        type: Component,
        args: [{
                selector: 'ngx-stripe-card-expiry',
                template: `<div class="field" #stripeElementRef></div>`
            }]
    }], function () { return [{ type: StripeElementsService }, { type: StripeCardGroupDirective, decorators: [{
                type: Optional
            }] }]; }, { load: [{
            type: Output
        }], blur: [{
            type: Output
        }], change: [{
            type: Output
        }], focus: [{
            type: Output
        }], ready: [{
            type: Output
        }], escape: [{
            type: Output
        }], stripeElementRef: [{
            type: ViewChild,
            args: ['stripeElementRef']
        }], containerClass: [{
            type: Input
        }], options: [{
            type: Input
        }] }); })();

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2FyZC1leHBpcnkuY29tcG9uZW50LmpzIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi9wcm9qZWN0cy9uZ3gtc3RyaXBlL3NyYy9saWIvY29tcG9uZW50cy9jYXJkLWV4cGlyeS5jb21wb25lbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLE9BQU8sRUFDTCxTQUFTLEVBQ1QsS0FBSyxFQUNMLFNBQVMsRUFFVCxZQUFZLEVBQ1osTUFBTSxFQUtOLFFBQVEsRUFDVCxNQUFNLGVBQWUsQ0FBQztBQVV2QixPQUFPLEVBQUUsd0JBQXdCLEVBQUUsTUFBTSxvQ0FBb0MsQ0FBQztBQUM5RSxPQUFPLEVBQUUscUJBQXFCLEVBQUUsTUFBTSxxQ0FBcUMsQ0FBQzs7OztBQU01RSxNQUFNLE9BQU8seUJBQXlCO0FBQUcsSUFrQnZDLFlBQ1MscUJBQTRDLEVBQy9CLFNBQW1DO0FBQ3hELFFBRlEsMEJBQXFCLEdBQXJCLHFCQUFxQixDQUF1QjtBQUFDLFFBQ2hDLGNBQVMsR0FBVCxTQUFTLENBQTBCO0FBQzNELFFBZFksU0FBSSxHQUFHLElBQUksWUFBWSxFQUEyQixDQUFDO0FBQy9ELFFBQ1ksU0FBSSxHQUFHLElBQUksWUFBWSxFQUFRLENBQUM7QUFDNUMsUUFBWSxXQUFNLEdBQUcsSUFBSSxZQUFZLEVBQXNDLENBQUM7QUFDNUUsUUFBWSxVQUFLLEdBQUcsSUFBSSxZQUFZLEVBQVEsQ0FBQztBQUM3QyxRQUFZLFVBQUssR0FBRyxJQUFJLFlBQVksRUFBUSxDQUFDO0FBQzdDLFFBQVksV0FBTSxHQUFHLElBQUksWUFBWSxFQUFRLENBQUM7QUFDOUMsSUFPSyxDQUFDO0FBQ04sSUFDUSxXQUFXLENBQUMsT0FBc0I7QUFDMUM7QUFDUyxZQURMLElBQUksT0FBTyxDQUFDLE9BQU8sSUFBSSxPQUFPLENBQUMsY0FBYyxFQUFFO0FBQ25ELGdCQUFNLElBQUksQ0FBQyxZQUFZLENBQUMsU0FBUyxDQUFDLENBQUM7QUFDbkMsYUFBSztBQUNMLFFBQUUsQ0FBQztB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QyxJQUFJLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsQ0FBQztBQUNuQyxTQUFLO0FBQ0wsSUFBRSxDQUFDO0FBQ0g7cURBekZDLFNBQVMsU0FBQyxrQkFDVCxRQUFRLEVBQUUsd0JBQXdCLGtCQUNsQyxRQUFRLEVBQUUsNkNBQTZDLGNBQ3hEOzs7Ozs7Ozs2QkFDSTtBQUFDO0FBQW1ELFlBTmhELHFCQUFxQjtBQUFJLFlBRHpCLHdCQUF3Qix1QkEyQjVCLFFBQVE7QUFBTTtBQUFHO0FBRXRCLCtCQXJCRyxTQUFTLFNBQUMsa0JBQWtCO0FBQU8sNkJBR25DLEtBQUs7QUFBSyxzQkFDVixLQUFLO0FBQUssbUJBRVYsTUFBTTtBQUFLLG1CQUVYLE1BQU07QUFBSyxxQkFDWCxNQUFNO0FBQUssb0JBQ1gsTUFBTTtBQUFLLG9CQUNYLE1BQU07QUFBSyxxQkFDWCxNQUFNO0FBQUk7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7b0JBQUU7QUFBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7XG4gIENvbXBvbmVudCxcbiAgSW5wdXQsXG4gIFZpZXdDaGlsZCxcbiAgRWxlbWVudFJlZixcbiAgRXZlbnRFbWl0dGVyLFxuICBPdXRwdXQsXG4gIE9uSW5pdCxcbiAgT25DaGFuZ2VzLFxuICBTaW1wbGVDaGFuZ2VzLFxuICBPbkRlc3Ryb3ksXG4gIE9wdGlvbmFsXG59IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgU3Vic2NyaXB0aW9uIH0gZnJvbSAncnhqcyc7XG5cbmltcG9ydCB7XG4gIFN0cmlwZUVsZW1lbnRzLFxuICBTdHJpcGVDYXJkRXhwaXJ5RWxlbWVudCxcbiAgU3RyaXBlQ2FyZEV4cGlyeUVsZW1lbnRPcHRpb25zLFxuICBTdHJpcGVDYXJkRXhwaXJ5RWxlbWVudENoYW5nZUV2ZW50XG59IGZyb20gJ0BzdHJpcGUvc3RyaXBlLWpzJztcblxuaW1wb3J0IHsgU3RyaXBlQ2FyZEdyb3VwRGlyZWN0aXZlIH0gZnJvbSAnLi4vZGlyZWN0aXZlcy9jYXJkLWdyb3VwLmRpcmVjdGl2ZSc7XG5pbXBvcnQgeyBTdHJpcGVFbGVtZW50c1NlcnZpY2UgfSBmcm9tICcuLi9zZXJ2aWNlcy9zdHJpcGUtZWxlbWVudHMuc2VydmljZSc7XG5cbkBDb21wb25lbnQoe1xuICBzZWxlY3RvcjogJ25neC1zdHJpcGUtY2FyZC1leHBpcnknLFxuICB0ZW1wbGF0ZTogYDxkaXYgY2xhc3M9XCJmaWVsZFwiICNzdHJpcGVFbGVtZW50UmVmPjwvZGl2PmBcbn0pXG5leHBvcnQgY2xhc3MgU3RyaXBlQ2FyZEV4cGlyeUNvbXBvbmVudCBpbXBsZW1lbnRzIE9uSW5pdCwgT25DaGFuZ2VzLCBPbkRlc3Ryb3kge1xuICBAVmlld0NoaWxkKCdzdHJpcGVFbGVtZW50UmVmJykgcHVibGljIHN0cmlwZUVsZW1lbnRSZWYhOiBFbGVtZW50UmVmO1xuICBlbGVtZW50ITogU3RyaXBlQ2FyZEV4cGlyeUVsZW1lbnQ7XG5cbiAgQElucHV0KCkgY29udGFpbmVyQ2xhc3M6IHN0cmluZztcbiAgQElucHV0KCkgb3B0aW9uczogUGFydGlhbDxTdHJpcGVDYXJkRXhwaXJ5RWxlbWVudE9wdGlvbnM+O1xuXG4gIEBPdXRwdXQoKSBsb2FkID0gbmV3IEV2ZW50RW1pdHRlcjxTdHJpcGVDYXJkRXhwaXJ5RWxlbWVudD4oKTtcblxuICBAT3V0cHV0KCkgYmx1ciA9IG5ldyBFdmVudEVtaXR0ZXI8dm9pZD4oKTtcbiAgQE91dHB1dCgpIGNoYW5nZSA9IG5ldyBFdmVudEVtaXR0ZXI8U3RyaXBlQ2FyZEV4cGlyeUVsZW1lbnRDaGFuZ2VFdmVudD4oKTtcbiAgQE91dHB1dCgpIGZvY3VzID0gbmV3IEV2ZW50RW1pdHRlcjx2b2lkPigpO1xuICBAT3V0cHV0KCkgcmVhZHkgPSBuZXcgRXZlbnRFbWl0dGVyPHZvaWQ+KCk7XG4gIEBPdXRwdXQoKSBlc2NhcGUgPSBuZXcgRXZlbnRFbWl0dGVyPHZvaWQ+KCk7XG5cbiAgZWxlbWVudHM6IFN0cmlwZUVsZW1lbnRzO1xuICBjYXJkR3JvdXBTdWJzY3JpcHRpb246IFN1YnNjcmlwdGlvbjtcblxuICBjb25zdHJ1Y3RvcihcbiAgICBwdWJsaWMgc3RyaXBlRWxlbWVudHNTZXJ2aWNlOiBTdHJpcGVFbGVtZW50c1NlcnZpY2UsXG4gICAgQE9wdGlvbmFsKCkgcHJpdmF0ZSBjYXJkR3JvdXA6IFN0cmlwZUNhcmRHcm91cERpcmVjdGl2ZVxuICApIHt9XG5cbiAgYXN5bmMgbmdPbkNoYW5nZXMoY2hhbmdlczogU2ltcGxlQ2hhbmdlcykge1xuICAgIGlmIChjaGFuZ2VzLm9wdGlvbnMgfHwgY2hhbmdlcy5jb250YWluZXJDbGFzcykge1xuICAgICAgdGhpcy5zZXR1cEVsZW1lbnQoJ29wdGlvbnMnKTtcbiAgICB9XG4gIH1cblxuICBuZ09uSW5pdCgpIHtcbiAgICBpZiAodGhpcy5jYXJkR3JvdXApIHtcbiAgICAgIHRoaXMuY2FyZEdyb3VwU3Vic2NyaXB0aW9uID0gdGhpcy5jYXJkR3JvdXAuZWxlbWVudHMuc3Vic2NyaWJlKFxuICAgICAgICAoZWxlbWVudHM6IFN0cmlwZUVsZW1lbnRzKSA9PiB7XG4gICAgICAgICAgdGhpcy5lbGVtZW50cyA9IGVsZW1lbnRzO1xuICAgICAgICAgIHRoaXMuc2V0dXBFbGVtZW50KCdlbGVtZW50cycpO1xuICAgICAgICB9XG4gICAgICApO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXG4gICAgICAgICdTdHJpcGVDYXJkRXhwaXJ5Q29tcG9uZW50IG11c3QgaGF2ZSBTdHJpcGVDYXJkR3JvdXBEaXJlY3RpdmUgcGFyZW50J1xuICAgICAgKTtcbiAgICB9XG4gIH1cblxuICBuZ09uRGVzdHJveSgpIHtcbiAgICBpZiAodGhpcy5lbGVtZW50KSB7XG4gICAgICB0aGlzLmVsZW1lbnQuZGVzdHJveSgpO1xuICAgIH1cbiAgICBpZiAodGhpcy5jYXJkR3JvdXBTdWJzY3JpcHRpb24pIHtcbiAgICAgIHRoaXMuY2FyZEdyb3VwU3Vic2NyaXB0aW9uLnVuc3Vic2NyaWJlKCk7XG4gICAgfVxuICB9XG5cbiAgdXBkYXRlKG9wdGlvbnM6IFBhcnRpYWw8U3RyaXBlQ2FyZEV4cGlyeUVsZW1lbnRPcHRpb25zPikge1xuICAgIHRoaXMuZWxlbWVudC51cGRhdGUob3B0aW9ucyk7XG4gIH1cblxuICAvKipcbiAgICogQGRlcHJlY2F0ZWRcbiAgICovXG4gIGdldENhcmRFeHBpcnkoKSB7XG4gICAgcmV0dXJuIHRoaXMuZWxlbWVudDtcbiAgfVxuXG4gIHByaXZhdGUgc2V0dXBFbGVtZW50KHNvdXJjZTogJ2VsZW1lbnRzJyB8ICdvcHRpb25zJykge1xuICAgIGNvbnN0IG9wdGlvbnMgPSB0aGlzLnN0cmlwZUVsZW1lbnRzU2VydmljZS5tZXJnZU9wdGlvbnMoXG4gICAgICB0aGlzLm9wdGlvbnMsXG4gICAgICB0aGlzLmNvbnRhaW5lckNsYXNzXG4gICAgKTtcblxuICAgIGlmICh0aGlzLmVsZW1lbnQgJiYgc291cmNlID09PSAnb3B0aW9ucycpIHtcbiAgICAgIHRoaXMudXBkYXRlKG9wdGlvbnMpO1xuICAgIH0gZWxzZSBpZiAodGhpcy5lbGVtZW50cyAmJiBzb3VyY2UgPT09ICdlbGVtZW50cycpIHtcbiAgICAgIHRoaXMuZWxlbWVudCA9IHRoaXMuZWxlbWVudHMuY3JlYXRlKCdjYXJkRXhwaXJ5Jywgb3B0aW9ucyk7XG4gICAgICB0aGlzLmVsZW1lbnQub24oJ2NoYW5nZScsIChldikgPT4gdGhpcy5jaGFuZ2UuZW1pdChldikpO1xuICAgICAgdGhpcy5lbGVtZW50Lm9uKCdibHVyJywgKCkgPT4gdGhpcy5ibHVyLmVtaXQoKSk7XG4gICAgICB0aGlzLmVsZW1lbnQub24oJ2ZvY3VzJywgKCkgPT4gdGhpcy5mb2N1cy5lbWl0KCkpO1xuICAgICAgdGhpcy5lbGVtZW50Lm9uKCdyZWFkeScsICgpID0+IHRoaXMucmVhZHkuZW1pdCgpKTtcbiAgICAgIHRoaXMuZWxlbWVudC5vbignZXNjYXBlJywgKCkgPT4gdGhpcy5lc2NhcGUuZW1pdCgpKTtcblxuICAgICAgdGhpcy5lbGVtZW50Lm1vdW50KHRoaXMuc3RyaXBlRWxlbWVudFJlZi5uYXRpdmVFbGVtZW50KTtcblxuICAgICAgdGhpcy5sb2FkLmVtaXQodGhpcy5lbGVtZW50KTtcbiAgICB9XG4gIH1cbn1cbiJdfQ==