import { Injectable } from '@angular/core';
import { StripeService } from './stripe.service';
import * as ɵngcc0 from '@angular/core';
export class StripeElementsService {
    constructor(stripeService) {
        this.stripeService = stripeService;
    }
    elements(stripe, options = {}) {
        if (stripe) {
            if (Object.keys(options).length > 0) {
                return stripe.elements(options);
            }
            return stripe.elements();
        }
        else {
            if (Object.keys(options).length > 0) {
                return this.stripeService.elements(options);
            }
            return this.stripeService.elements();
        }
    }
    paymentRequest(stripe, options) {
        return stripe
            ? stripe.paymentRequest(options)
            : this.stripeService.paymentRequest(options);
    }
    mergeOptions(options, containerClass) {
        if (!containerClass || (options && options.classes)) {
            return options || {};
        }
        if (!options || !options.classes) {
            return Object.assign(Object.assign({}, (options || {})), { classes: {
                    base: containerClass,
                    complete: `${containerClass}--complete`,
                    empty: `${containerClass}--empty`,
                    focus: `${containerClass}--focus`,
                    invalid: `${containerClass}--invalid`,
                    webkitAutoFill: `${containerClass}--webkit-autoFill`
                } });
        }
        return options || {};
    }
}
StripeElementsService.ɵfac = function StripeElementsService_Factory(t) { return new (t || StripeElementsService)(ɵngcc0.ɵɵinject(StripeService)); };
StripeElementsService.ɵprov = ɵngcc0.ɵɵdefineInjectable({ token: StripeElementsService, factory: StripeElementsService.ɵfac });
StripeElementsService.ctorParameters = () => [
    { type: StripeService }
];
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(StripeElementsService, [{
        type: Injectable
    }], function () { return [{ type: StripeService }]; }, null); })();

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3RyaXBlLWVsZW1lbnRzLnNlcnZpY2UuanMiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uL3Byb2plY3RzL25neC1zdHJpcGUvc3JjL2xpYi9zZXJ2aWNlcy9zdHJpcGUtZWxlbWVudHMuc2VydmljZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBa0IzQyxPQUFPLEVBQUUsYUFBYSxFQUFFLE1BQU0sa0JBQWtCLENBQUM7O0FBR2pELE1BQU0sT0FBTyxxQkFBcUI7QUFDbEMsSUFBRSxZQUFvQixhQUE0QjtBQUFJLFFBQWhDLGtCQUFhLEdBQWIsYUFBYSxDQUFlO0FBQUMsSUFBRSxDQUFDO0FBQ3RELElBQ0UsUUFBUSxDQUNOLE1BQU0sRUFDTixVQUFpQyxFQUFFO0FBQ3BDLFFBQ0MsSUFBSSxNQUFNLEVBQUU7QUFDaEIsWUFBTSxJQUFJLE1BQU0sQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLENBQUMsTUFBTSxHQUFHLENBQUMsRUFBRTtBQUMzQyxnQkFBUSxPQUFPLE1BQU0sQ0FBQyxRQUFRLENBQUMsT0FBTyxDQUFDLENBQUM7QUFDeEMsYUFBTztBQUNQLFlBQU0sT0FBTyxNQUFNLENBQUMsUUFBUSxFQUFFLENBQUM7QUFDL0IsU0FBSztBQUFDLGFBQUs7QUFDWCxZQUFNLElBQUksTUFBTSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsQ0FBQyxNQUFNLEdBQUcsQ0FBQyxFQUFFO0FBQzNDLGdCQUFRLE9BQU8sSUFBSSxDQUFDLGFBQWEsQ0FBQyxRQUFRLENBQUMsT0FBTyxDQUFDLENBQUM7QUFDcEQsYUFBTztBQUNQLFlBQU0sT0FBTyxJQUFJLENBQUMsYUFBYSxDQUFDLFFBQVEsRUFBRSxDQUFDO0FBQzNDLFNBQUs7QUFDTCxJQUFFLENBQUM7QUFDSCxJQUNFLGNBQWMsQ0FDWixNQUFNLEVBQ04sT0FBOEI7QUFDL0IsUUFDQyxPQUFPLE1BQU07QUFDakIsWUFBTSxDQUFDLENBQUMsTUFBTSxDQUFDLGNBQWMsQ0FBQyxPQUFPLENBQUM7QUFDdEMsWUFBTSxDQUFDLENBQUMsSUFBSSxDQUFDLGFBQWEsQ0FBQyxjQUFjLENBQUMsT0FBTyxDQUFDLENBQUM7QUFDbkQsSUFBRSxDQUFDO0FBQ0gsSUFpQ0UsWUFBWSxDQUFDLE9BQU8sRUFBRSxjQUFzQjtBQUM5QyxRQUFJLElBQUksQ0FBQyxjQUFjLElBQUksQ0FBQyxPQUFPLElBQUksT0FBTyxDQUFDLE9BQU8sQ0FBQyxFQUFFO0FBQ3pELFlBQU0sT0FBTyxPQUFPLElBQUksRUFBRSxDQUFDO0FBQzNCLFNBQUs7QUFDTCxRQUNJLElBQUksQ0FBQyxPQUFPLElBQUksQ0FBQyxPQUFPLENBQUMsT0FBTyxFQUFFO0FBQ3RDLFlBQU0sdUNBQ0ssQ0FBQyxPQUFPLElBQUksRUFBRSxDQUFDLEtBQ2xCLE9BQU8sRUFBRTtBQUNqQixvQkFBVSxJQUFJLEVBQUUsY0FBYztBQUM5QixvQkFBVSxRQUFRLEVBQUUsR0FBRyxjQUFjLFlBQVk7QUFDakQsb0JBQVUsS0FBSyxFQUFFLEdBQUcsY0FBYyxTQUFTO0FBQzNDLG9CQUFVLEtBQUssRUFBRSxHQUFHLGNBQWMsU0FBUztBQUMzQyxvQkFBVSxPQUFPLEVBQUUsR0FBRyxjQUFjLFdBQVc7QUFDL0Msb0JBQVUsY0FBYyxFQUFFLEdBQUcsY0FBYyxtQkFBbUI7QUFDOUQsaUJBQVMsSUFDRDtBQUNSLFNBQUs7QUFDTCxRQUNJLE9BQU8sT0FBTyxJQUFJLEVBQUUsQ0FBQztBQUN6QixJQUFFLENBQUM7QUFDSDtpREFuRkMsVUFBVTsrSEFDVDtBQUFDO0FBQ1UsWUFKSixhQUFhO0FBQUc7Ozt1RUFBRTtBQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW5qZWN0YWJsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgT2JzZXJ2YWJsZSB9IGZyb20gJ3J4anMnO1xuXG5pbXBvcnQge1xuICBQYXltZW50UmVxdWVzdCxcbiAgUGF5bWVudFJlcXVlc3RPcHRpb25zLFxuICBTdHJpcGVDYXJkRWxlbWVudE9wdGlvbnMsXG4gIFN0cmlwZUF1QmFua0FjY291bnRFbGVtZW50T3B0aW9ucyxcbiAgU3RyaXBlQ2FyZE51bWJlckVsZW1lbnRPcHRpb25zLFxuICBTdHJpcGVDYXJkRXhwaXJ5RWxlbWVudE9wdGlvbnMsXG4gIFN0cmlwZUVsZW1lbnRzLFxuICBTdHJpcGVFbGVtZW50c09wdGlvbnMsXG4gIFN0cmlwZUZweEJhbmtFbGVtZW50T3B0aW9ucyxcbiAgU3RyaXBlSWJhbkVsZW1lbnRPcHRpb25zLFxuICBTdHJpcGVJZGVhbEJhbmtFbGVtZW50T3B0aW9ucyxcbiAgU3RyaXBlUGF5bWVudFJlcXVlc3RCdXR0b25FbGVtZW50T3B0aW9uc1xufSBmcm9tICdAc3RyaXBlL3N0cmlwZS1qcyc7XG5cbmltcG9ydCB7IFN0cmlwZVNlcnZpY2UgfSBmcm9tICcuL3N0cmlwZS5zZXJ2aWNlJztcblxuQEluamVjdGFibGUoKVxuZXhwb3J0IGNsYXNzIFN0cmlwZUVsZW1lbnRzU2VydmljZSB7XG4gIGNvbnN0cnVjdG9yKHByaXZhdGUgc3RyaXBlU2VydmljZTogU3RyaXBlU2VydmljZSkge31cblxuICBlbGVtZW50cyhcbiAgICBzdHJpcGUsXG4gICAgb3B0aW9uczogU3RyaXBlRWxlbWVudHNPcHRpb25zID0ge31cbiAgKTogT2JzZXJ2YWJsZTxTdHJpcGVFbGVtZW50cz4ge1xuICAgIGlmIChzdHJpcGUpIHtcbiAgICAgIGlmIChPYmplY3Qua2V5cyhvcHRpb25zKS5sZW5ndGggPiAwKSB7XG4gICAgICAgIHJldHVybiBzdHJpcGUuZWxlbWVudHMob3B0aW9ucyk7XG4gICAgICB9XG4gICAgICByZXR1cm4gc3RyaXBlLmVsZW1lbnRzKCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGlmIChPYmplY3Qua2V5cyhvcHRpb25zKS5sZW5ndGggPiAwKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnN0cmlwZVNlcnZpY2UuZWxlbWVudHMob3B0aW9ucyk7XG4gICAgICB9XG4gICAgICByZXR1cm4gdGhpcy5zdHJpcGVTZXJ2aWNlLmVsZW1lbnRzKCk7XG4gICAgfVxuICB9XG5cbiAgcGF5bWVudFJlcXVlc3QoXG4gICAgc3RyaXBlLFxuICAgIG9wdGlvbnM6IFBheW1lbnRSZXF1ZXN0T3B0aW9uc1xuICApOiBQYXltZW50UmVxdWVzdCB8IHVuZGVmaW5lZCB7XG4gICAgcmV0dXJuIHN0cmlwZVxuICAgICAgPyBzdHJpcGUucGF5bWVudFJlcXVlc3Qob3B0aW9ucylcbiAgICAgIDogdGhpcy5zdHJpcGVTZXJ2aWNlLnBheW1lbnRSZXF1ZXN0KG9wdGlvbnMpO1xuICB9XG5cbiAgbWVyZ2VPcHRpb25zKFxuICAgIG9wdGlvbnM6IFN0cmlwZUNhcmRFbGVtZW50T3B0aW9ucyxcbiAgICBjb250YWluZXJDbGFzczogc3RyaW5nXG4gICk6IFN0cmlwZUNhcmRFbGVtZW50T3B0aW9ucztcbiAgbWVyZ2VPcHRpb25zKFxuICAgIG9wdGlvbnM6IFN0cmlwZUNhcmROdW1iZXJFbGVtZW50T3B0aW9ucyxcbiAgICBjb250YWluZXJDbGFzczogc3RyaW5nXG4gICk6IFN0cmlwZUNhcmROdW1iZXJFbGVtZW50T3B0aW9ucztcbiAgbWVyZ2VPcHRpb25zKFxuICAgIG9wdGlvbnM6IFN0cmlwZUNhcmRFeHBpcnlFbGVtZW50T3B0aW9ucyxcbiAgICBjb250YWluZXJDbGFzczogc3RyaW5nXG4gICk6IFN0cmlwZUNhcmRFeHBpcnlFbGVtZW50T3B0aW9ucztcbiAgbWVyZ2VPcHRpb25zKFxuICAgIG9wdGlvbnM6IFN0cmlwZUZweEJhbmtFbGVtZW50T3B0aW9ucyxcbiAgICBjb250YWluZXJDbGFzczogc3RyaW5nXG4gICk6IFN0cmlwZUZweEJhbmtFbGVtZW50T3B0aW9ucztcbiAgbWVyZ2VPcHRpb25zKFxuICAgIG9wdGlvbnM6IFN0cmlwZUliYW5FbGVtZW50T3B0aW9ucyxcbiAgICBjb250YWluZXJDbGFzczogc3RyaW5nXG4gICk6IFN0cmlwZUliYW5FbGVtZW50T3B0aW9ucztcbiAgbWVyZ2VPcHRpb25zKFxuICAgIG9wdGlvbnM6IFN0cmlwZUlkZWFsQmFua0VsZW1lbnRPcHRpb25zLFxuICAgIGNvbnRhaW5lckNsYXNzOiBzdHJpbmdcbiAgKTogU3RyaXBlSWRlYWxCYW5rRWxlbWVudE9wdGlvbnM7XG4gIG1lcmdlT3B0aW9ucyhcbiAgICBvcHRpb25zOiBTdHJpcGVBdUJhbmtBY2NvdW50RWxlbWVudE9wdGlvbnMsXG4gICAgY29udGFpbmVyQ2xhc3M6IHN0cmluZ1xuICApOiBTdHJpcGVBdUJhbmtBY2NvdW50RWxlbWVudE9wdGlvbnM7XG4gIG1lcmdlT3B0aW9ucyhcbiAgICBvcHRpb25zOiBTdHJpcGVQYXltZW50UmVxdWVzdEJ1dHRvbkVsZW1lbnRPcHRpb25zLFxuICAgIGNvbnRhaW5lckNsYXNzOiBzdHJpbmdcbiAgKTogU3RyaXBlUGF5bWVudFJlcXVlc3RCdXR0b25FbGVtZW50T3B0aW9ucztcbiAgbWVyZ2VPcHRpb25zKG9wdGlvbnMsIGNvbnRhaW5lckNsYXNzOiBzdHJpbmcpIHtcbiAgICBpZiAoIWNvbnRhaW5lckNsYXNzIHx8IChvcHRpb25zICYmIG9wdGlvbnMuY2xhc3NlcykpIHtcbiAgICAgIHJldHVybiBvcHRpb25zIHx8IHt9O1xuICAgIH1cblxuICAgIGlmICghb3B0aW9ucyB8fCAhb3B0aW9ucy5jbGFzc2VzKSB7XG4gICAgICByZXR1cm4ge1xuICAgICAgICAuLi4ob3B0aW9ucyB8fCB7fSksXG4gICAgICAgIGNsYXNzZXM6IHtcbiAgICAgICAgICBiYXNlOiBjb250YWluZXJDbGFzcyxcbiAgICAgICAgICBjb21wbGV0ZTogYCR7Y29udGFpbmVyQ2xhc3N9LS1jb21wbGV0ZWAsXG4gICAgICAgICAgZW1wdHk6IGAke2NvbnRhaW5lckNsYXNzfS0tZW1wdHlgLFxuICAgICAgICAgIGZvY3VzOiBgJHtjb250YWluZXJDbGFzc30tLWZvY3VzYCxcbiAgICAgICAgICBpbnZhbGlkOiBgJHtjb250YWluZXJDbGFzc30tLWludmFsaWRgLFxuICAgICAgICAgIHdlYmtpdEF1dG9GaWxsOiBgJHtjb250YWluZXJDbGFzc30tLXdlYmtpdC1hdXRvRmlsbGBcbiAgICAgICAgfVxuICAgICAgfTtcbiAgICB9XG5cbiAgICByZXR1cm4gb3B0aW9ucyB8fCB7fTtcbiAgfVxufVxuIl19