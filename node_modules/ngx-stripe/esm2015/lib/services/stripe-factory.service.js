import { Inject, Injectable } from '@angular/core';
import { STRIPE_OPTIONS, STRIPE_PUBLISHABLE_KEY } from '../interfaces/ngx-stripe.interface';
import { LazyStripeAPILoader } from './api-loader.service';
import { WindowRef } from './window-ref.service';
import { StripeInstance } from './stripe-instance.class';
import * as ɵngcc0 from '@angular/core';
export class StripeFactoryService {
    constructor(baseKey, baseOptions, loader, window) {
        this.baseKey = baseKey;
        this.baseOptions = baseOptions;
        this.loader = loader;
        this.window = window;
    }
    create(key, options) {
        if (!key && !this.baseKey) {
            return null;
        }
        return new StripeInstance(this.loader, this.window, key || this.baseKey, options || this.baseOptions);
    }
}
StripeFactoryService.ɵfac = function StripeFactoryService_Factory(t) { return new (t || StripeFactoryService)(ɵngcc0.ɵɵinject(STRIPE_PUBLISHABLE_KEY), ɵngcc0.ɵɵinject(STRIPE_OPTIONS), ɵngcc0.ɵɵinject(LazyStripeAPILoader), ɵngcc0.ɵɵinject(WindowRef)); };
StripeFactoryService.ɵprov = ɵngcc0.ɵɵdefineInjectable({ token: StripeFactoryService, factory: StripeFactoryService.ɵfac });
StripeFactoryService.ctorParameters = () => [
    { type: String, decorators: [{ type: Inject, args: [STRIPE_PUBLISHABLE_KEY,] }] },
    { type: undefined, decorators: [{ type: Inject, args: [STRIPE_OPTIONS,] }] },
    { type: LazyStripeAPILoader },
    { type: WindowRef }
];
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(StripeFactoryService, [{
        type: Injectable
    }], function () { return [{ type: String, decorators: [{
                type: Inject,
                args: [STRIPE_PUBLISHABLE_KEY]
            }] }, { type: undefined, decorators: [{
                type: Inject,
                args: [STRIPE_OPTIONS]
            }] }, { type: LazyStripeAPILoader }, { type: WindowRef }]; }, null); })();

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3RyaXBlLWZhY3Rvcnkuc2VydmljZS5qcyIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vcHJvamVjdHMvbmd4LXN0cmlwZS9zcmMvbGliL3NlcnZpY2VzL3N0cmlwZS1mYWN0b3J5LnNlcnZpY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLE1BQU0sRUFBRSxVQUFVLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFJbkQsT0FBTyxFQUNMLGNBQWMsRUFDZCxzQkFBc0IsRUFDdkIsTUFBTSxvQ0FBb0MsQ0FBQztBQUU1QyxPQUFPLEVBQUUsbUJBQW1CLEVBQUUsTUFBTSxzQkFBc0IsQ0FBQztBQUMzRCxPQUFPLEVBQUUsU0FBUyxFQUFFLE1BQU0sc0JBQXNCLENBQUM7QUFFakQsT0FBTyxFQUFFLGNBQWMsRUFBRSxNQUFNLHlCQUF5QixDQUFDOztBQUd6RCxNQUFNLE9BQU8sb0JBQW9CO0FBQ2pDLElBQUUsWUFDeUMsT0FBZSxFQUN2QixXQUFxQyxFQUM3RCxNQUEyQixFQUMzQixNQUFpQjtBQUN6QixRQUp3QyxZQUFPLEdBQVAsT0FBTyxDQUFRO0FBQUMsUUFDeEIsZ0JBQVcsR0FBWCxXQUFXLENBQTBCO0FBQUMsUUFDOUQsV0FBTSxHQUFOLE1BQU0sQ0FBcUI7QUFBQyxRQUM1QixXQUFNLEdBQU4sTUFBTSxDQUFXO0FBQzVCLElBQUssQ0FBQztBQUNOLElBQ1MsTUFBTSxDQUNYLEdBQVksRUFDWixPQUFrQztBQUNuQyxRQUNDLElBQUksQ0FBQyxHQUFHLElBQUksQ0FBQyxJQUFJLENBQUMsT0FBTyxFQUFFO0FBQy9CLFlBQU0sT0FBTyxJQUFJLENBQUM7QUFDbEIsU0FBSztBQUNMLFFBQ0ksT0FBTyxJQUFJLGNBQWMsQ0FDdkIsSUFBSSxDQUFDLE1BQU0sRUFDWCxJQUFJLENBQUMsTUFBTSxFQUNYLEdBQUcsSUFBSSxJQUFJLENBQUMsT0FBTyxFQUNuQixPQUFPLElBQUksSUFBSSxDQUFDLFdBQVcsQ0FDNUIsQ0FBQztBQUNOLElBQUUsQ0FBQztBQUNIO2dEQXhCQyxVQUFVOzRIQUNUO0FBQUM7QUFDVSx5Q0FDUixNQUFNLFNBQUMsc0JBQXNCO0FBQVMsNENBQ3RDLE1BQU0sU0FBQyxjQUFjO0FBQVMsWUFUMUIsbUJBQW1CO0FBQUksWUFDdkIsU0FBUztBQUFHOzs7Ozs7Ozs7c0ZBQUU7QUFBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEluamVjdCwgSW5qZWN0YWJsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuXG5pbXBvcnQgeyBTdHJpcGVDb25zdHJ1Y3Rvck9wdGlvbnMgfSBmcm9tICdAc3RyaXBlL3N0cmlwZS1qcyc7XG5cbmltcG9ydCB7XG4gIFNUUklQRV9PUFRJT05TLFxuICBTVFJJUEVfUFVCTElTSEFCTEVfS0VZXG59IGZyb20gJy4uL2ludGVyZmFjZXMvbmd4LXN0cmlwZS5pbnRlcmZhY2UnO1xuXG5pbXBvcnQgeyBMYXp5U3RyaXBlQVBJTG9hZGVyIH0gZnJvbSAnLi9hcGktbG9hZGVyLnNlcnZpY2UnO1xuaW1wb3J0IHsgV2luZG93UmVmIH0gZnJvbSAnLi93aW5kb3ctcmVmLnNlcnZpY2UnO1xuXG5pbXBvcnQgeyBTdHJpcGVJbnN0YW5jZSB9IGZyb20gJy4vc3RyaXBlLWluc3RhbmNlLmNsYXNzJztcblxuQEluamVjdGFibGUoKVxuZXhwb3J0IGNsYXNzIFN0cmlwZUZhY3RvcnlTZXJ2aWNlIHtcbiAgY29uc3RydWN0b3IoXG4gICAgQEluamVjdChTVFJJUEVfUFVCTElTSEFCTEVfS0VZKSBwdWJsaWMgYmFzZUtleTogc3RyaW5nLFxuICAgIEBJbmplY3QoU1RSSVBFX09QVElPTlMpIHB1YmxpYyBiYXNlT3B0aW9uczogU3RyaXBlQ29uc3RydWN0b3JPcHRpb25zLFxuICAgIHB1YmxpYyBsb2FkZXI6IExhenlTdHJpcGVBUElMb2FkZXIsXG4gICAgcHVibGljIHdpbmRvdzogV2luZG93UmVmXG4gICkge31cblxuICBwdWJsaWMgY3JlYXRlKFxuICAgIGtleT86IHN0cmluZyxcbiAgICBvcHRpb25zPzogU3RyaXBlQ29uc3RydWN0b3JPcHRpb25zXG4gICk6IFN0cmlwZUluc3RhbmNlIHtcbiAgICBpZiAoIWtleSAmJiAhdGhpcy5iYXNlS2V5KSB7XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG5cbiAgICByZXR1cm4gbmV3IFN0cmlwZUluc3RhbmNlKFxuICAgICAgdGhpcy5sb2FkZXIsXG4gICAgICB0aGlzLndpbmRvdyxcbiAgICAgIGtleSB8fCB0aGlzLmJhc2VLZXksXG4gICAgICBvcHRpb25zIHx8IHRoaXMuYmFzZU9wdGlvbnNcbiAgICApO1xuICB9XG59XG4iXX0=