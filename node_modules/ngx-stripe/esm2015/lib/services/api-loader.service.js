import { Inject, Injectable, PLATFORM_ID } from '@angular/core';
import { isPlatformServer } from '@angular/common';
import { BehaviorSubject } from 'rxjs';
import { WindowRef } from './window-ref.service';
import { DocumentRef } from './document-ref.service';
import * as ɵngcc0 from '@angular/core';
export class LazyStripeAPILoader {
    constructor(platformId, window, document) {
        this.platformId = platformId;
        this.window = window;
        this.document = document;
        this.status = new BehaviorSubject({
            error: false,
            loaded: false,
            loading: false
        });
    }
    asStream() {
        this.load();
        return this.status.asObservable();
    }
    isReady() {
        return this.status.getValue().loaded;
    }
    load() {
        if (isPlatformServer(this.platformId)) {
            return;
        }
        const status = this.status.getValue();
        if (this.window.getNativeWindow().hasOwnProperty('Stripe')) {
            this.status.next({
                error: false,
                loaded: true,
                loading: false
            });
        }
        else if (!status.loaded && !status.loading) {
            this.status.next(Object.assign(Object.assign({}, status), { loading: true }));
            const script = this.document.getNativeDocument().createElement('script');
            script.type = 'text/javascript';
            script.async = true;
            script.defer = true;
            script.src = 'https://js.stripe.com/v3/';
            script.onload = () => {
                this.status.next({
                    error: false,
                    loaded: true,
                    loading: false
                });
            };
            script.onerror = () => {
                this.status.next({
                    error: true,
                    loaded: false,
                    loading: false
                });
            };
            this.document.getNativeDocument().body.appendChild(script);
        }
    }
}
LazyStripeAPILoader.ɵfac = function LazyStripeAPILoader_Factory(t) { return new (t || LazyStripeAPILoader)(ɵngcc0.ɵɵinject(PLATFORM_ID), ɵngcc0.ɵɵinject(WindowRef), ɵngcc0.ɵɵinject(DocumentRef)); };
LazyStripeAPILoader.ɵprov = ɵngcc0.ɵɵdefineInjectable({ token: LazyStripeAPILoader, factory: LazyStripeAPILoader.ɵfac });
LazyStripeAPILoader.ctorParameters = () => [
    { type: undefined, decorators: [{ type: Inject, args: [PLATFORM_ID,] }] },
    { type: WindowRef },
    { type: DocumentRef }
];
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(LazyStripeAPILoader, [{
        type: Injectable
    }], function () { return [{ type: undefined, decorators: [{
                type: Inject,
                args: [PLATFORM_ID]
            }] }, { type: WindowRef }, { type: DocumentRef }]; }, null); })();

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXBpLWxvYWRlci5zZXJ2aWNlLmpzIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi9wcm9qZWN0cy9uZ3gtc3RyaXBlL3NyYy9saWIvc2VydmljZXMvYXBpLWxvYWRlci5zZXJ2aWNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxNQUFNLEVBQUUsVUFBVSxFQUFFLFdBQVcsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUNoRSxPQUFPLEVBQUUsZ0JBQWdCLEVBQUUsTUFBTSxpQkFBaUIsQ0FBQztBQUVuRCxPQUFPLEVBQWMsZUFBZSxFQUFFLE1BQU0sTUFBTSxDQUFDO0FBRW5ELE9BQU8sRUFBRSxTQUFTLEVBQUUsTUFBTSxzQkFBc0IsQ0FBQztBQUNqRCxPQUFPLEVBQUUsV0FBVyxFQUFFLE1BQU0sd0JBQXdCLENBQUM7O0FBU3JELE1BQU0sT0FBTyxtQkFBbUI7QUFDaEMsSUFNRSxZQUM4QixVQUFlLEVBQ3BDLE1BQWlCLEVBQ2pCLFFBQXFCO0FBQzdCLFFBSDZCLGVBQVUsR0FBVixVQUFVLENBQUs7QUFBQyxRQUNyQyxXQUFNLEdBQU4sTUFBTSxDQUFXO0FBQUMsUUFDbEIsYUFBUSxHQUFSLFFBQVEsQ0FBYTtBQUNoQyxRQVZTLFdBQU0sR0FBRyxJQUFJLGVBQWUsQ0FBNEI7QUFDakUsWUFBSSxLQUFLLEVBQUUsS0FBSztBQUNoQixZQUFJLE1BQU0sRUFBRSxLQUFLO0FBQ2pCLFlBQUksT0FBTyxFQUFFLEtBQUs7QUFDbEIsU0FBRyxDQUFDLENBQUM7QUFDTCxJQUtLLENBQUM7QUFDTixJQUNTLFFBQVE7QUFBSyxRQUNsQixJQUFJLENBQUMsSUFBSSxFQUFFLENBQUM7QUFDaEIsUUFBSSxPQUFPLElBQUksQ0FBQyxNQUFNLENBQUMsWUFBWSxFQUFFLENBQUM7QUFDdEMsSUFBRSxDQUFDO0FBQ0gsSUFDUyxPQUFPO0FBQUssUUFDakIsT0FBTyxJQUFJLENBQUMsTUFBTSxDQUFDLFFBQVEsRUFBRSxDQUFDLE1BQU0sQ0FBQztBQUN6QyxJQUFFLENBQUM7QUFDSCxJQUNTLElBQUk7QUFDYixRQUFJLElBQUksZ0JBQWdCLENBQUMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxFQUFFO0FBQzNDLFlBQU0sT0FBTztBQUNiLFNBQUs7QUFDTCxRQUFJLE1BQU0sTUFBTSxHQUE4QixJQUFJLENBQUMsTUFBTSxDQUFDLFFBQVEsRUFBRSxDQUFDO0FBQ3JFLFFBQUksSUFBSSxJQUFJLENBQUMsTUFBTSxDQUFDLGVBQWUsRUFBRSxDQUFDLGNBQWMsQ0FBQyxRQUFRLENBQUMsRUFBRTtBQUNoRSxZQUFNLElBQUksQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDO0FBQ3ZCLGdCQUFRLEtBQUssRUFBRSxLQUFLO0FBQ3BCLGdCQUFRLE1BQU0sRUFBRSxJQUFJO0FBQ3BCLGdCQUFRLE9BQU8sRUFBRSxLQUFLO0FBQ3RCLGFBQU8sQ0FBQyxDQUFDO0FBQ1QsU0FBSztBQUFDLGFBQUssSUFBSSxDQUFDLE1BQU0sQ0FBQyxNQUFNLElBQUksQ0FBQyxNQUFNLENBQUMsT0FBTyxFQUFFO0FBQ2xELFlBQU0sSUFBSSxDQUFDLE1BQU0sQ0FBQyxJQUFJLGlDQUNYLE1BQU0sS0FDVCxPQUFPLEVBQUUsSUFBSSxJQUNiLENBQUM7QUFDVCxZQUNNLE1BQU0sTUFBTSxHQUFHLElBQUksQ0FBQyxRQUFRLENBQUMsaUJBQWlCLEVBQUUsQ0FBQyxhQUFhLENBQUMsUUFBUSxDQUFDLENBQUM7QUFDL0UsWUFBTSxNQUFNLENBQUMsSUFBSSxHQUFHLGlCQUFpQixDQUFDO0FBQ3RDLFlBQU0sTUFBTSxDQUFDLEtBQUssR0FBRyxJQUFJLENBQUM7QUFDMUIsWUFBTSxNQUFNLENBQUMsS0FBSyxHQUFHLElBQUksQ0FBQztBQUMxQixZQUFNLE1BQU0sQ0FBQyxHQUFHLEdBQUcsMkJBQTJCLENBQUM7QUFDL0MsWUFDTSxNQUFNLENBQUMsTUFBTSxHQUFHLEdBQUcsRUFBRTtBQUMzQixnQkFBUSxJQUFJLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQztBQUN6QixvQkFBVSxLQUFLLEVBQUUsS0FBSztBQUN0QixvQkFBVSxNQUFNLEVBQUUsSUFBSTtBQUN0QixvQkFBVSxPQUFPLEVBQUUsS0FBSztBQUN4QixpQkFBUyxDQUFDLENBQUM7QUFDWCxZQUFNLENBQUMsQ0FBQztBQUNSLFlBQ00sTUFBTSxDQUFDLE9BQU8sR0FBRyxHQUFHLEVBQUU7QUFDNUIsZ0JBQVEsSUFBSSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUM7QUFDekIsb0JBQVUsS0FBSyxFQUFFLElBQUk7QUFDckIsb0JBQVUsTUFBTSxFQUFFLEtBQUs7QUFDdkIsb0JBQVUsT0FBTyxFQUFFLEtBQUs7QUFDeEIsaUJBQVMsQ0FBQyxDQUFDO0FBQ1gsWUFBTSxDQUFDLENBQUM7QUFDUixZQUNNLElBQUksQ0FBQyxRQUFRLENBQUMsaUJBQWlCLEVBQUUsQ0FBQyxJQUFJLENBQUMsV0FBVyxDQUFDLE1BQU0sQ0FBQyxDQUFDO0FBQ2pFLFNBQUs7QUFDTCxJQUFFLENBQUM7QUFDSDsrQ0FqRUMsVUFBVTt5SEFDVDtBQUFDO0FBQ1UsNENBT1IsTUFBTSxTQUFDLFdBQVc7QUFBUyxZQWxCdkIsU0FBUztBQUFJLFlBQ2IsV0FBVztBQUFHOzs7Ozs7OEVBQUU7QUFBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEluamVjdCwgSW5qZWN0YWJsZSwgUExBVEZPUk1fSUQgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IGlzUGxhdGZvcm1TZXJ2ZXIgfSBmcm9tICdAYW5ndWxhci9jb21tb24nO1xuXG5pbXBvcnQgeyBPYnNlcnZhYmxlLCBCZWhhdmlvclN1YmplY3QgfSBmcm9tICdyeGpzJztcblxuaW1wb3J0IHsgV2luZG93UmVmIH0gZnJvbSAnLi93aW5kb3ctcmVmLnNlcnZpY2UnO1xuaW1wb3J0IHsgRG9jdW1lbnRSZWYgfSBmcm9tICcuL2RvY3VtZW50LXJlZi5zZXJ2aWNlJztcblxuZXhwb3J0IGludGVyZmFjZSBMYXp5U3RyaXBlQVBJTG9hZGVyU3RhdHVzIHtcbiAgbG9hZGVkOiBib29sZWFuO1xuICBsb2FkaW5nOiBib29sZWFuO1xuICBlcnJvcjogYm9vbGVhbjtcbn1cblxuQEluamVjdGFibGUoKVxuZXhwb3J0IGNsYXNzIExhenlTdHJpcGVBUElMb2FkZXIge1xuICBwdWJsaWMgc3RhdHVzID0gbmV3IEJlaGF2aW9yU3ViamVjdDxMYXp5U3RyaXBlQVBJTG9hZGVyU3RhdHVzPih7XG4gICAgZXJyb3I6IGZhbHNlLFxuICAgIGxvYWRlZDogZmFsc2UsXG4gICAgbG9hZGluZzogZmFsc2VcbiAgfSk7XG5cbiAgY29uc3RydWN0b3IoXG4gICAgQEluamVjdChQTEFURk9STV9JRCkgcHVibGljIHBsYXRmb3JtSWQ6IGFueSxcbiAgICBwdWJsaWMgd2luZG93OiBXaW5kb3dSZWYsXG4gICAgcHVibGljIGRvY3VtZW50OiBEb2N1bWVudFJlZlxuICApIHt9XG5cbiAgcHVibGljIGFzU3RyZWFtKCk6IE9ic2VydmFibGU8TGF6eVN0cmlwZUFQSUxvYWRlclN0YXR1cz4ge1xuICAgIHRoaXMubG9hZCgpO1xuICAgIHJldHVybiB0aGlzLnN0YXR1cy5hc09ic2VydmFibGUoKTtcbiAgfVxuXG4gIHB1YmxpYyBpc1JlYWR5KCk6IGJvb2xlYW4ge1xuICAgIHJldHVybiB0aGlzLnN0YXR1cy5nZXRWYWx1ZSgpLmxvYWRlZDtcbiAgfVxuXG4gIHB1YmxpYyBsb2FkKCkge1xuICAgIGlmIChpc1BsYXRmb3JtU2VydmVyKHRoaXMucGxhdGZvcm1JZCkpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgY29uc3Qgc3RhdHVzOiBMYXp5U3RyaXBlQVBJTG9hZGVyU3RhdHVzID0gdGhpcy5zdGF0dXMuZ2V0VmFsdWUoKTtcbiAgICBpZiAodGhpcy53aW5kb3cuZ2V0TmF0aXZlV2luZG93KCkuaGFzT3duUHJvcGVydHkoJ1N0cmlwZScpKSB7XG4gICAgICB0aGlzLnN0YXR1cy5uZXh0KHtcbiAgICAgICAgZXJyb3I6IGZhbHNlLFxuICAgICAgICBsb2FkZWQ6IHRydWUsXG4gICAgICAgIGxvYWRpbmc6IGZhbHNlXG4gICAgICB9KTtcbiAgICB9IGVsc2UgaWYgKCFzdGF0dXMubG9hZGVkICYmICFzdGF0dXMubG9hZGluZykge1xuICAgICAgdGhpcy5zdGF0dXMubmV4dCh7XG4gICAgICAgIC4uLnN0YXR1cyxcbiAgICAgICAgbG9hZGluZzogdHJ1ZVxuICAgICAgfSk7XG5cbiAgICAgIGNvbnN0IHNjcmlwdCA9IHRoaXMuZG9jdW1lbnQuZ2V0TmF0aXZlRG9jdW1lbnQoKS5jcmVhdGVFbGVtZW50KCdzY3JpcHQnKTtcbiAgICAgIHNjcmlwdC50eXBlID0gJ3RleHQvamF2YXNjcmlwdCc7XG4gICAgICBzY3JpcHQuYXN5bmMgPSB0cnVlO1xuICAgICAgc2NyaXB0LmRlZmVyID0gdHJ1ZTtcbiAgICAgIHNjcmlwdC5zcmMgPSAnaHR0cHM6Ly9qcy5zdHJpcGUuY29tL3YzLyc7XG5cbiAgICAgIHNjcmlwdC5vbmxvYWQgPSAoKSA9PiB7XG4gICAgICAgIHRoaXMuc3RhdHVzLm5leHQoe1xuICAgICAgICAgIGVycm9yOiBmYWxzZSxcbiAgICAgICAgICBsb2FkZWQ6IHRydWUsXG4gICAgICAgICAgbG9hZGluZzogZmFsc2VcbiAgICAgICAgfSk7XG4gICAgICB9O1xuXG4gICAgICBzY3JpcHQub25lcnJvciA9ICgpID0+IHtcbiAgICAgICAgdGhpcy5zdGF0dXMubmV4dCh7XG4gICAgICAgICAgZXJyb3I6IHRydWUsXG4gICAgICAgICAgbG9hZGVkOiBmYWxzZSxcbiAgICAgICAgICBsb2FkaW5nOiBmYWxzZVxuICAgICAgICB9KTtcbiAgICAgIH07XG5cbiAgICAgIHRoaXMuZG9jdW1lbnQuZ2V0TmF0aXZlRG9jdW1lbnQoKS5ib2R5LmFwcGVuZENoaWxkKHNjcmlwdCk7XG4gICAgfVxuICB9XG59XG4iXX0=