import { __awaiter } from "tslib";
import { Directive, Input, Output, EventEmitter } from '@angular/core';
import { StripeElementsService } from '../services/stripe-elements.service';
import * as ɵngcc0 from '@angular/core';
export class StripeCardGroupDirective {
    constructor(stripeElementsService) {
        this.stripeElementsService = stripeElementsService;
        this.elements = new EventEmitter();
        this.state = 'notready';
    }
    ngOnChanges(changes) {
        return __awaiter(this, void 0, void 0, function* () {
            this.state = 'starting';
            const elementsOptions = this.elementsOptions;
            const stripe = this.stripe;
            if (changes.elementsOptions || changes.stripe || !this._elements) {
                this._elements = yield this.stripeElementsService
                    .elements(stripe, elementsOptions)
                    .toPromise();
                this.elements.emit(this._elements);
            }
            this.state = 'ready';
        });
    }
    ngOnInit() {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.state === 'notready') {
                this.state = 'starting';
                this._elements = yield this.stripeElementsService
                    .elements(this.stripe)
                    .toPromise();
                this.elements.emit(this._elements);
                this.state = 'ready';
            }
        });
    }
}
StripeCardGroupDirective.ɵfac = function StripeCardGroupDirective_Factory(t) { return new (t || StripeCardGroupDirective)(ɵngcc0.ɵɵdirectiveInject(StripeElementsService)); };
StripeCardGroupDirective.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: StripeCardGroupDirective, selectors: [["ngx-stripe-card-group"], ["", "ngxStripeCardGroup", ""]], inputs: { elementsOptions: "elementsOptions", stripe: "stripe" }, outputs: { elements: "elements" }, features: [ɵngcc0.ɵɵNgOnChangesFeature] });
StripeCardGroupDirective.ctorParameters = () => [
    { type: StripeElementsService }
];
StripeCardGroupDirective.propDecorators = {
    elementsOptions: [{ type: Input }],
    stripe: [{ type: Input }],
    elements: [{ type: Output }]
};
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(StripeCardGroupDirective, [{
        type: Directive,
        args: [{
                selector: 'ngx-stripe-card-group,[ngxStripeCardGroup]'
            }]
    }], function () { return [{ type: StripeElementsService }]; }, { elements: [{
            type: Output
        }], elementsOptions: [{
            type: Input
        }], stripe: [{
            type: Input
        }] }); })();

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2FyZC1ncm91cC5kaXJlY3RpdmUuanMiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uL3Byb2plY3RzL25neC1zdHJpcGUvc3JjL2xpYi9kaXJlY3RpdmVzL2NhcmQtZ3JvdXAuZGlyZWN0aXZlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxPQUFPLEVBQ0wsU0FBUyxFQUNULEtBQUssRUFJTCxNQUFNLEVBQ04sWUFBWSxFQUNiLE1BQU0sZUFBZSxDQUFDO0FBS3ZCLE9BQU8sRUFBRSxxQkFBcUIsRUFBRSxNQUFNLHFDQUFxQyxDQUFDOztBQUs1RSxNQUFNLE9BQU8sd0JBQXdCO0FBQUcsSUFTdEMsWUFBbUIscUJBQTRDO0FBQUksUUFBaEQsMEJBQXFCLEdBQXJCLHFCQUFxQixDQUF1QjtBQUFDLFFBTHRELGFBQVEsR0FBRyxJQUFJLFlBQVksRUFBa0IsQ0FBQztBQUMxRCxRQUVFLFVBQUssR0FBc0MsVUFBVSxDQUFDO0FBQ3hELElBQ29FLENBQUM7QUFDckUsSUFDUSxXQUFXLENBQUMsT0FBc0I7QUFDMUM7QUFFZ0MsWUFGNUIsSUFBSSxDQUFDLEtBQUssR0FBRyxVQUFVLENBQUM7QUFDNUIsWUFDSSxNQUFNLGVBQWUsR0FBRyxJQUFJLENBQUMsZUFBZSxDQUFDO0FBQ2pELFlBQUksTUFBTSxNQUFNLEdBQUcsSUFBSSxDQUFDLE1BQU0sQ0FBQztBQUMvQixZQUNJLElBQUksT0FBTyxDQUFDLGVBQWUsSUFBSSxPQUFPLENBQUMsTUFBTSxJQUFJLENBQUMsSUFBSSxDQUFDLFNBQVMsRUFBRTtBQUN0RSxnQkFBTSxJQUFJLENBQUMsU0FBUyxHQUFHLE1BQU0sSUFBSSxDQUFDLHFCQUFxQjtBQUN2RCxxQkFBUyxRQUFRLENBQUMsTUFBTSxFQUFFLGVBQWUsQ0FBQztBQUMxQyxxQkFBUyxTQUFTLEVBQUUsQ0FBQztBQUNyQixnQkFBTSxJQUFJLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLENBQUM7QUFDekMsYUFBSztBQUNMLFlBQ0ksSUFBSSxDQUFDLEtBQUssR0FBRyxPQUFPLENBQUM7QUFDekIsUUFBRSxDQUFDO0FBRUYsS0FGRTtBQUNILElBQ1EsUUFBUTtBQUNoQjtBQUN5QixZQURyQixJQUFJLElBQUksQ0FBQyxLQUFLLEtBQUssVUFBVSxFQUFFO0FBQ25DLGdCQUFNLElBQUksQ0FBQyxLQUFLLEdBQUcsVUFBVSxDQUFDO0FBQzlCLGdCQUNNLElBQUksQ0FBQyxTQUFTLEdBQUcsTUFBTSxJQUFJLENBQUMscUJBQXFCO0FBQ3ZELHFCQUFTLFFBQVEsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDO0FBQzlCLHFCQUFTLFNBQVMsRUFBRSxDQUFDO0FBQ3JCLGdCQUFNLElBQUksQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsQ0FBQztBQUN6QyxnQkFDTSxJQUFJLENBQUMsS0FBSyxHQUFHLE9BQU8sQ0FBQztBQUMzQixhQUFLO0FBQ0wsUUFBRSxDQUFDO0FBRUgsS0FGRztBQUNIO29EQTFDQyxTQUFTLFNBQUMsa0JBQ1QsUUFBUSxFQUFFLDRDQUE0QyxjQUN2RDttVEFDSTtBQUFDO0FBQWtELFlBTC9DLHFCQUFxQjtBQUFHO0FBQUc7QUFFbEMsOEJBSUMsS0FBSztBQUFLLHFCQUNWLEtBQUs7QUFBSyx1QkFFVixNQUFNO0FBQUk7Ozs7Ozs7Ozs7OztvQkFBRTtBQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtcbiAgRGlyZWN0aXZlLFxuICBJbnB1dCxcbiAgT25Jbml0LFxuICBPbkNoYW5nZXMsXG4gIFNpbXBsZUNoYW5nZXMsXG4gIE91dHB1dCxcbiAgRXZlbnRFbWl0dGVyXG59IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuXG5pbXBvcnQgeyBTdHJpcGVFbGVtZW50cywgU3RyaXBlRWxlbWVudHNPcHRpb25zIH0gZnJvbSAnQHN0cmlwZS9zdHJpcGUtanMnO1xuXG5pbXBvcnQgeyBTdHJpcGVJbnN0YW5jZSB9IGZyb20gJy4uL3NlcnZpY2VzL3N0cmlwZS1pbnN0YW5jZS5jbGFzcyc7XG5pbXBvcnQgeyBTdHJpcGVFbGVtZW50c1NlcnZpY2UgfSBmcm9tICcuLi9zZXJ2aWNlcy9zdHJpcGUtZWxlbWVudHMuc2VydmljZSc7XG5cbkBEaXJlY3RpdmUoe1xuICBzZWxlY3RvcjogJ25neC1zdHJpcGUtY2FyZC1ncm91cCxbbmd4U3RyaXBlQ2FyZEdyb3VwXSdcbn0pXG5leHBvcnQgY2xhc3MgU3RyaXBlQ2FyZEdyb3VwRGlyZWN0aXZlIGltcGxlbWVudHMgT25Jbml0LCBPbkNoYW5nZXMge1xuICBASW5wdXQoKSBlbGVtZW50c09wdGlvbnM6IFBhcnRpYWw8U3RyaXBlRWxlbWVudHNPcHRpb25zPjtcbiAgQElucHV0KCkgc3RyaXBlOiBTdHJpcGVJbnN0YW5jZTtcblxuICBAT3V0cHV0KCkgZWxlbWVudHMgPSBuZXcgRXZlbnRFbWl0dGVyPFN0cmlwZUVsZW1lbnRzPigpO1xuXG4gIF9lbGVtZW50czogU3RyaXBlRWxlbWVudHM7XG4gIHN0YXRlOiAnbm90cmVhZHknIHwgJ3N0YXJ0aW5nJyB8ICdyZWFkeScgPSAnbm90cmVhZHknO1xuXG4gIGNvbnN0cnVjdG9yKHB1YmxpYyBzdHJpcGVFbGVtZW50c1NlcnZpY2U6IFN0cmlwZUVsZW1lbnRzU2VydmljZSkge31cblxuICBhc3luYyBuZ09uQ2hhbmdlcyhjaGFuZ2VzOiBTaW1wbGVDaGFuZ2VzKSB7XG4gICAgdGhpcy5zdGF0ZSA9ICdzdGFydGluZyc7XG5cbiAgICBjb25zdCBlbGVtZW50c09wdGlvbnMgPSB0aGlzLmVsZW1lbnRzT3B0aW9ucztcbiAgICBjb25zdCBzdHJpcGUgPSB0aGlzLnN0cmlwZTtcblxuICAgIGlmIChjaGFuZ2VzLmVsZW1lbnRzT3B0aW9ucyB8fCBjaGFuZ2VzLnN0cmlwZSB8fCAhdGhpcy5fZWxlbWVudHMpIHtcbiAgICAgIHRoaXMuX2VsZW1lbnRzID0gYXdhaXQgdGhpcy5zdHJpcGVFbGVtZW50c1NlcnZpY2VcbiAgICAgICAgLmVsZW1lbnRzKHN0cmlwZSwgZWxlbWVudHNPcHRpb25zKVxuICAgICAgICAudG9Qcm9taXNlKCk7XG4gICAgICB0aGlzLmVsZW1lbnRzLmVtaXQodGhpcy5fZWxlbWVudHMpO1xuICAgIH1cblxuICAgIHRoaXMuc3RhdGUgPSAncmVhZHknO1xuICB9XG5cbiAgYXN5bmMgbmdPbkluaXQoKSB7XG4gICAgaWYgKHRoaXMuc3RhdGUgPT09ICdub3RyZWFkeScpIHtcbiAgICAgIHRoaXMuc3RhdGUgPSAnc3RhcnRpbmcnO1xuXG4gICAgICB0aGlzLl9lbGVtZW50cyA9IGF3YWl0IHRoaXMuc3RyaXBlRWxlbWVudHNTZXJ2aWNlXG4gICAgICAgIC5lbGVtZW50cyh0aGlzLnN0cmlwZSlcbiAgICAgICAgLnRvUHJvbWlzZSgpO1xuICAgICAgdGhpcy5lbGVtZW50cy5lbWl0KHRoaXMuX2VsZW1lbnRzKTtcblxuICAgICAgdGhpcy5zdGF0ZSA9ICdyZWFkeSc7XG4gICAgfVxuICB9XG59XG4iXX0=