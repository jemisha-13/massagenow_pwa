/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Directive, ElementRef, Renderer2, Input } from '@angular/core';
import * as ɵngcc0 from '@angular/core';
export class NumberOnlyDirective {
    /**
     * @param {?} _elRef
     * @param {?} _renderer
     */
    constructor(_elRef, _renderer) {
        this._elRef = _elRef;
        this._renderer = _renderer;
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        if (!this.disabledNumberOnly) {
            this._renderer.setAttribute(this._elRef.nativeElement, 'onkeypress', 'return (event.charCode >= 48 && event.charCode <= 57) || event.charCode == 0');
        }
    }
}
NumberOnlyDirective.ɵfac = function NumberOnlyDirective_Factory(t) { return new (t || NumberOnlyDirective)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.Renderer2)); };
NumberOnlyDirective.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: NumberOnlyDirective, selectors: [["", "numberOnly", ""]], inputs: { disabledNumberOnly: "disabledNumberOnly" } });
/** @nocollapse */
NumberOnlyDirective.ctorParameters = () => [
    { type: ElementRef },
    { type: Renderer2 }
];
NumberOnlyDirective.propDecorators = {
    disabledNumberOnly: [{ type: Input }]
};
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(NumberOnlyDirective, [{
        type: Directive,
        args: [{
                selector: '[numberOnly]'
            }]
    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: ɵngcc0.Renderer2 }]; }, { disabledNumberOnly: [{
            type: Input
        }] }); })();
if (false) {
    /** @type {?} */
    NumberOnlyDirective.prototype.disabledNumberOnly;
    /**
     * @type {?}
     * @private
     */
    NumberOnlyDirective.prototype._elRef;
    /**
     * @type {?}
     * @private
     */
    NumberOnlyDirective.prototype._renderer;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibnVtYmVyLW9ubHkuZGlyZWN0aXZlLmpzIiwic291cmNlcyI6WyJuZzovbmctb3RwLWlucHV0L2xpYi9kaXJlY3RpdmVzL251bWJlci1vbmx5LmRpcmVjdGl2ZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O0FBQUEsT0FBTyxFQUFFLFNBQVMsRUFBRSxVQUFVLEVBQUUsU0FBUyxFQUFFLEtBQUssRUFBRSxNQUFNLGVBQWUsQ0FBQzs7QUFLeEUsTUFBTSxPQUFPLG1CQUFtQjtBQUNoQztBQUFRO0FBQXlCO0FBQ1g7QUFBUSxJQUE1QixZQUFxQixNQUFrQixFQUFVLFNBQW9CO0FBQUksUUFBcEQsV0FBTSxHQUFOLE1BQU0sQ0FBWTtBQUFDLFFBQVMsY0FBUyxHQUFULFNBQVMsQ0FBVztBQUFDLElBQUcsQ0FBQztBQUM1RTtBQUNPO0FBQ0k7QUFBUSxJQURqQixRQUFRO0FBQ1YsUUFBSSxJQUFHLENBQUMsSUFBSSxDQUFDLGtCQUFrQixFQUFDO0FBQ2hDLFlBQU0sSUFBSSxDQUFDLFNBQVMsQ0FBQyxZQUFZLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxhQUFhLEVBQUUsWUFBWSxFQUFFLDhFQUE4RSxDQUFDLENBQUM7QUFDM0osU0FBSztBQUNMLElBQUUsQ0FBQztBQUNIOytDQVpDLFNBQVMsU0FBQyxrQkFDVCxRQUFRLEVBQUUsY0FBYyxjQUN6Qjs4S0FDSTtBQUFDO0FBQW1CO0FBQ1UsWUFOZixVQUFVO0FBQUksWUFBRixTQUFTO0FBQUc7QUFBRztBQUVuQyxpQ0FJVCxLQUFLO0FBQUk7Ozs7Ozs7O29CQUFFO0FBQUM7QUFBYTtBQUNsQixJQURSLGlEQUFvQztBQUN0QztBQUFRO0FBQWlCO0FBQWdCO0FBQVEsSUFBbEMscUNBQTBCO0FBQUM7QUFBUTtBQUFpQjtBQUU5RDtBQUFRLElBRjhCLHdDQUE0Qjs7QUFQQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBS0EsQUFBQSxBQUFBLEFBQUEsQUFFQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBRUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFDQSxBQUFBLEFBWEEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUpBLEFBQUEsQUFBQSxBQUFBLEFBTUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IERpcmVjdGl2ZSwgRWxlbWVudFJlZiwgUmVuZGVyZXIyLCBJbnB1dCB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5cclxuQERpcmVjdGl2ZSh7XHJcbiAgc2VsZWN0b3I6ICdbbnVtYmVyT25seV0nXHJcbn0pXHJcbmV4cG9ydCBjbGFzcyBOdW1iZXJPbmx5RGlyZWN0aXZlIHtcclxuICBASW5wdXQoKSBkaXNhYmxlZE51bWJlck9ubHk6Ym9vbGVhbjtcclxuICBjb25zdHJ1Y3RvciAocHJpdmF0ZSBfZWxSZWY6IEVsZW1lbnRSZWYsIHByaXZhdGUgX3JlbmRlcmVyOiBSZW5kZXJlcjIpIHsgfVxyXG5cclxuICBuZ09uSW5pdCgpIHtcclxuICAgIGlmKCF0aGlzLmRpc2FibGVkTnVtYmVyT25seSl7XHJcbiAgICAgIHRoaXMuX3JlbmRlcmVyLnNldEF0dHJpYnV0ZSh0aGlzLl9lbFJlZi5uYXRpdmVFbGVtZW50LCAnb25rZXlwcmVzcycsICdyZXR1cm4gKGV2ZW50LmNoYXJDb2RlID49IDQ4ICYmIGV2ZW50LmNoYXJDb2RlIDw9IDU3KSB8fCBldmVudC5jaGFyQ29kZSA9PSAwJyk7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxufSJdfQ==