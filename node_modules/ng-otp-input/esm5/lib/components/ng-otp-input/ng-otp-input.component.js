/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Component, Input, Output, EventEmitter } from '@angular/core';
import { FormGroup, FormControl } from '@angular/forms';
import { KeysPipe } from '../../pipes/keys.pipe';
import { Config } from '../../models/config';
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from '@angular/common';
import * as ɵngcc2 from '@angular/forms';
import * as ɵngcc3 from '../../directives/number-only.directive';
import * as ɵngcc4 from '../../pipes/keys.pipe';

function NgOtpInputComponent_div_0_input_1_Template(rf, ctx) { if (rf & 1) {
    var _r5 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "input", 3);
    ɵngcc0.ɵɵlistener("keydown", function NgOtpInputComponent_div_0_input_1_Template_input_keydown_0_listener($event) { ɵngcc0.ɵɵrestoreView(_r5); var ctx_r4 = ɵngcc0.ɵɵnextContext(2); return ctx_r4.onKeyDown($event); })("keyup", function NgOtpInputComponent_div_0_input_1_Template_input_keyup_0_listener($event) { ɵngcc0.ɵɵrestoreView(_r5); var i_r3 = ctx.index; var ctx_r6 = ɵngcc0.ɵɵnextContext(2); return ctx_r6.onKeyUp($event, i_r3); });
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    var item_r2 = ctx.$implicit;
    var i_r3 = ctx.index;
    var ctx_r1 = ɵngcc0.ɵɵnextContext(2);
    ɵngcc0.ɵɵclassMapInterpolate1("otp-input ", ctx_r1.config.inputClass, "");
    ɵngcc0.ɵɵpropertyInterpolate2("id", "otp_", i_r3, "_", ctx_r1.componentKey, "");
    ɵngcc0.ɵɵproperty("pattern", ctx_r1.config.allowNumbersOnly ? "\\d*" : "")("type", ctx_r1.inputType)("placeholder", (ctx_r1.config == null ? null : ctx_r1.config.placeholder) || "")("disabledNumberOnly", !ctx_r1.config.allowNumbersOnly)("ngStyle", ctx_r1.config.inputStyles)("formControl", ctx_r1.otpForm.controls[item_r2]);
} }
function NgOtpInputComponent_div_0_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "div", 1);
    ɵngcc0.ɵɵtemplate(1, NgOtpInputComponent_div_0_input_1_Template, 1, 11, "input", 2);
    ɵngcc0.ɵɵpipe(2, "keys");
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    var ctx_r0 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵclassMapInterpolate1("wrapper ", ctx_r0.config.containerClass, "");
    ɵngcc0.ɵɵpropertyInterpolate1("id", "c_", ctx_r0.componentKey, "");
    ɵngcc0.ɵɵproperty("ngStyle", ctx_r0.config.containerStyles);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngForOf", ɵngcc0.ɵɵpipeBind1(2, 6, ctx_r0.otpForm == null ? null : ctx_r0.otpForm.controls));
} }
var NgOtpInputComponent = /** @class */ (function () {
    function NgOtpInputComponent(keysPipe) {
        this.keysPipe = keysPipe;
        this.config = { length: 4 };
        // tslint:disable-next-line: no-output-on-prefix
        this.onInputChange = new EventEmitter();
        this.inputControls = new Array(this.config.length);
        this.componentKey = Math.random()
            .toString(36)
            .substring(2) + new Date().getTime().toString(36);
    }
    /**
     * @return {?}
     */
    NgOtpInputComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        this.otpForm = new FormGroup({});
        for (var index = 0; index < this.config.length; index++) {
            this.otpForm.addControl(this.getControlName(index), new FormControl());
        }
        this.inputType = this.getInputType();
    };
    /**
     * @return {?}
     */
    NgOtpInputComponent.prototype.ngAfterViewInit = /**
     * @return {?}
     */
    function () {
        var _this = this;
        if (!this.config.disableAutoFocus) {
            /** @type {?} */
            var containerItem = document.getElementById("c_" + this.componentKey);
            if (containerItem) {
                containerItem.addEventListener('paste', (/**
                 * @param {?} evt
                 * @return {?}
                 */
                function (evt) { return _this.handlePaste(evt); }));
                /** @type {?} */
                var ele = containerItem.getElementsByClassName('otp-input')[0];
                if (ele && ele.focus) {
                    ele.focus();
                }
            }
        }
    };
    /**
     * @private
     * @param {?} idx
     * @return {?}
     */
    NgOtpInputComponent.prototype.getControlName = /**
     * @private
     * @param {?} idx
     * @return {?}
     */
    function (idx) {
        return "ctrl_" + idx;
    };
    /**
     * @param {?} event
     * @return {?}
     */
    NgOtpInputComponent.prototype.ifLeftArrow = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        return this.ifKeyCode(event, 37);
    };
    /**
     * @param {?} event
     * @return {?}
     */
    NgOtpInputComponent.prototype.ifRightArrow = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        return this.ifKeyCode(event, 39);
    };
    /**
     * @param {?} event
     * @return {?}
     */
    NgOtpInputComponent.prototype.ifBackspaceOrDelete = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        return (event.key === 'Backspace' ||
            event.key === 'Delete' ||
            this.ifKeyCode(event, 8) ||
            this.ifKeyCode(event, 46));
    };
    /**
     * @param {?} event
     * @param {?} targetCode
     * @return {?}
     */
    NgOtpInputComponent.prototype.ifKeyCode = /**
     * @param {?} event
     * @param {?} targetCode
     * @return {?}
     */
    function (event, targetCode) {
        /** @type {?} */
        var key = event.keyCode || event.charCode;
        // tslint:disable-next-line: triple-equals
        return key == targetCode ? true : false;
    };
    /**
     * @param {?} $event
     * @return {?}
     */
    NgOtpInputComponent.prototype.onKeyDown = /**
     * @param {?} $event
     * @return {?}
     */
    function ($event) {
        /** @type {?} */
        var isSpace = this.ifKeyCode($event, 32);
        if (isSpace) { // prevent space
            return false;
        }
    };
    /**
     * @param {?} $event
     * @param {?} inputIdx
     * @return {?}
     */
    NgOtpInputComponent.prototype.onKeyUp = /**
     * @param {?} $event
     * @param {?} inputIdx
     * @return {?}
     */
    function ($event, inputIdx) {
        /** @type {?} */
        var nextInputId = this.appendKey("otp_" + (inputIdx + 1));
        /** @type {?} */
        var prevInputId = this.appendKey("otp_" + (inputIdx - 1));
        if (this.ifRightArrow($event)) {
            this.setSelected(nextInputId);
            return;
        }
        if (this.ifLeftArrow($event)) {
            this.setSelected(prevInputId);
            return;
        }
        /** @type {?} */
        var isBackspace = this.ifBackspaceOrDelete($event);
        if (isBackspace && !$event.target.value) {
            this.setSelected(prevInputId);
            this.rebuildValue();
            return;
        }
        if (!$event.target.value) {
            return;
        }
        if (this.ifValidEntry($event)) {
            this.setSelected(nextInputId);
        }
        this.rebuildValue();
    };
    /**
     * @param {?} id
     * @return {?}
     */
    NgOtpInputComponent.prototype.appendKey = /**
     * @param {?} id
     * @return {?}
     */
    function (id) {
        return id + "_" + this.componentKey;
    };
    /**
     * @param {?} eleId
     * @return {?}
     */
    NgOtpInputComponent.prototype.setSelected = /**
     * @param {?} eleId
     * @return {?}
     */
    function (eleId) {
        this.focusTo(eleId);
        /** @type {?} */
        var ele = document.getElementById(eleId);
        if (ele && ele.setSelectionRange) {
            setTimeout((/**
             * @return {?}
             */
            function () {
                ele.setSelectionRange(0, 1);
            }), 0);
        }
    };
    /**
     * @param {?} event
     * @return {?}
     */
    NgOtpInputComponent.prototype.ifValidEntry = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        /** @type {?} */
        var inp = String.fromCharCode(event.keyCode);
        /** @type {?} */
        var isMobile = /iPhone|iPad|iPod|Android/i.test(navigator.userAgent);
        return (isMobile ||
            /[a-zA-Z0-9-_]/.test(inp) ||
            (this.config.allowKeyCodes &&
                this.config.allowKeyCodes.includes(event.keyCode)) ||
            (event.keyCode >= 96 && event.keyCode <= 105));
    };
    /**
     * @param {?} eleId
     * @return {?}
     */
    NgOtpInputComponent.prototype.focusTo = /**
     * @param {?} eleId
     * @return {?}
     */
    function (eleId) {
        /** @type {?} */
        var ele = document.getElementById(eleId);
        if (ele) {
            ele.focus();
        }
    };
    // method to set component value
    // method to set component value
    /**
     * @param {?} value
     * @return {?}
     */
    NgOtpInputComponent.prototype.setValue = 
    // method to set component value
    /**
     * @param {?} value
     * @return {?}
     */
    function (value) {
        var _this = this;
        if (this.config.allowNumbersOnly && isNaN(value)) {
            return;
        }
        this.otpForm.reset();
        if (!value) {
            this.rebuildValue();
            return;
        }
        value = value.toString().replace(/\s/g, ''); // remove whitespace
        Array.from(value).forEach((/**
         * @param {?} c
         * @param {?} idx
         * @return {?}
         */
        function (c, idx) {
            if (_this.otpForm.get(_this.getControlName(idx))) {
                _this.otpForm.get(_this.getControlName(idx)).setValue(c);
            }
        }));
        if (!this.config.disableAutoFocus) {
            /** @type {?} */
            var containerItem = document.getElementById("c_" + this.componentKey);
            /** @type {?} */
            var indexOfElementToFocus = value.length < this.config.length ? value.length : (this.config.length - 1);
            /** @type {?} */
            var ele = containerItem.getElementsByClassName('otp-input')[indexOfElementToFocus];
            if (ele && ele.focus) {
                ele.focus();
            }
        }
        this.rebuildValue();
    };
    /**
     * @return {?}
     */
    NgOtpInputComponent.prototype.rebuildValue = /**
     * @return {?}
     */
    function () {
        var _this = this;
        /** @type {?} */
        var val = '';
        this.keysPipe.transform(this.otpForm.controls).forEach((/**
         * @param {?} k
         * @return {?}
         */
        function (k) {
            if (_this.otpForm.controls[k].value) {
                val += _this.otpForm.controls[k].value;
            }
        }));
        this.onInputChange.emit(val);
    };
    /**
     * @return {?}
     */
    NgOtpInputComponent.prototype.getInputType = /**
     * @return {?}
     */
    function () {
        return this.config.isPasswordInput
            ? 'password'
            : this.config.allowNumbersOnly
                ? 'tel'
                : 'text';
    };
    /**
     * @param {?} e
     * @return {?}
     */
    NgOtpInputComponent.prototype.handlePaste = /**
     * @param {?} e
     * @return {?}
     */
    function (e) {
        // Get pasted data via clipboard API
        /** @type {?} */
        var clipboardData = e.clipboardData || window['clipboardData'];
        if (clipboardData) {
            /** @type {?} */
            var pastedData = clipboardData.getData('Text');
        }
        // Stop data actually being pasted into div
        e.stopPropagation();
        e.preventDefault();
        if (!pastedData) {
            return;
        }
        this.setValue(pastedData);
    };
    /** @nocollapse */
    NgOtpInputComponent.ctorParameters = function () { return [
        { type: KeysPipe }
    ]; };
    NgOtpInputComponent.propDecorators = {
        config: [{ type: Input }],
        onInputChange: [{ type: Output }]
    };
NgOtpInputComponent.ɵfac = function NgOtpInputComponent_Factory(t) { return new (t || NgOtpInputComponent)(ɵngcc0.ɵɵdirectiveInject(KeysPipe)); };
NgOtpInputComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: NgOtpInputComponent, selectors: [["ng-otp-input"]], inputs: { config: "config" }, outputs: { onInputChange: "onInputChange" }, decls: 1, vars: 1, consts: [[3, "class", "id", "ngStyle", 4, "ngIf"], [3, "id", "ngStyle"], ["numberOnly", "", "maxlength", "1", "autocomplete", "off", 3, "pattern", "type", "placeholder", "disabledNumberOnly", "ngStyle", "class", "formControl", "id", "keydown", "keyup", 4, "ngFor", "ngForOf"], ["numberOnly", "", "maxlength", "1", "autocomplete", "off", 3, "pattern", "type", "placeholder", "disabledNumberOnly", "ngStyle", "formControl", "id", "keydown", "keyup"]], template: function NgOtpInputComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵtemplate(0, NgOtpInputComponent_div_0_Template, 3, 8, "div", 0);
    } if (rf & 2) {
        ɵngcc0.ɵɵproperty("ngIf", ctx.otpForm == null ? null : ctx.otpForm.controls);
    } }, directives: [ɵngcc1.NgIf, ɵngcc1.NgStyle, ɵngcc1.NgForOf, ɵngcc2.DefaultValueAccessor, ɵngcc3.NumberOnlyDirective, ɵngcc2.MaxLengthValidator, ɵngcc2.PatternValidator, ɵngcc2.NgControlStatus, ɵngcc2.FormControlDirective], pipes: [ɵngcc4.KeysPipe], styles: [".otp-input[_ngcontent-%COMP%]{width:50px;height:50px;border-radius:4px;border:1px solid #c5c5c5;text-align:center;font-size:32px}.wrapper[_ngcontent-%COMP%]   .otp-input[_ngcontent-%COMP%]:not(:last-child){margin-right:8px}@media screen and (max-width:767px){.otp-input[_ngcontent-%COMP%]{width:40px;font-size:24px;height:40px}}@media screen and (max-width:420px){.otp-input[_ngcontent-%COMP%]{width:30px;font-size:18px;height:30px}}"] });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(NgOtpInputComponent, [{
        type: Component,
        args: [{
                // tslint:disable-next-line: component-selector
                selector: 'ng-otp-input',
                template: "<div class=\"wrapper {{config.containerClass}}\" id=\"c_{{componentKey}}\" *ngIf=\"otpForm?.controls\"\r\n  [ngStyle]=\"config.containerStyles\">\r\n  <input [pattern]=\"config.allowNumbersOnly ? '\\\\d*' : ''\" [type]=\"inputType\" numberOnly [placeholder]=\"config?.placeholder || ''\"\r\n    [disabledNumberOnly]=\"!config.allowNumbersOnly\" [ngStyle]=\"config.inputStyles\" maxlength=\"1\"\r\n    class=\"otp-input {{config.inputClass}}\" autocomplete=\"off\" *ngFor=\"let item of otpForm?.controls | keys;let i=index\"\r\n    [formControl]=\"otpForm.controls[item]\" id=\"otp_{{i}}_{{componentKey}}\" (keydown)=\"onKeyDown($event)\"\r\n    (keyup)=\"onKeyUp($event,i)\">\r\n</div>",
                styles: [".otp-input{width:50px;height:50px;border-radius:4px;border:1px solid #c5c5c5;text-align:center;font-size:32px}.wrapper .otp-input:not(:last-child){margin-right:8px}@media screen and (max-width:767px){.otp-input{width:40px;font-size:24px;height:40px}}@media screen and (max-width:420px){.otp-input{width:30px;font-size:18px;height:30px}}"]
            }]
    }], function () { return [{ type: KeysPipe }]; }, { config: [{
            type: Input
        }], onInputChange: [{
            type: Output
        }] }); })();
    return NgOtpInputComponent;
}());
export { NgOtpInputComponent };
if (false) {
    /** @type {?} */
    NgOtpInputComponent.prototype.config;
    /** @type {?} */
    NgOtpInputComponent.prototype.onInputChange;
    /** @type {?} */
    NgOtpInputComponent.prototype.otpForm;
    /** @type {?} */
    NgOtpInputComponent.prototype.inputControls;
    /** @type {?} */
    NgOtpInputComponent.prototype.componentKey;
    /** @type {?} */
    NgOtpInputComponent.prototype.inputType;
    /**
     * @type {?}
     * @private
     */
    NgOtpInputComponent.prototype.keysPipe;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibmctb3RwLWlucHV0LmNvbXBvbmVudC5qcyIsInNvdXJjZXMiOlsibmc6L25nLW90cC1pbnB1dC9saWIvY29tcG9uZW50cy9uZy1vdHAtaW5wdXQvbmctb3RwLWlucHV0LmNvbXBvbmVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O0FBQUEsT0FBTyxFQUNMLFNBQVMsRUFFVCxLQUFLLEVBQ0wsTUFBTSxFQUNOLFlBQVksRUFFYixNQUFNLGVBQWUsQ0FBQztBQUN2QixPQUFPLEVBQUUsU0FBUyxFQUFFLFdBQVcsRUFBRSxNQUFNLGdCQUFnQixDQUFDO0FBQ3hELE9BQU8sRUFBRSxRQUFRLEVBQUUsTUFBTSx1QkFBdUIsQ0FBQztBQUNqRCxPQUFPLEVBQUUsTUFBTSxFQUFFLE1BQU0scUJBQXFCLENBQUM7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQUM3QztBQUMwQyxJQWdCeEMsNkJBQW9CLFFBQWtCO0FBQUksUUFBdEIsYUFBUSxHQUFSLFFBQVEsQ0FBVTtBQUFDLFFBVjlCLFdBQU0sR0FBVyxFQUFFLE1BQU0sRUFBRSxDQUFDLEVBQUUsQ0FBQztBQUMxQztBQUNNLFFBQU0sa0JBQWEsR0FBRyxJQUFJLFlBQVksRUFBVSxDQUFDO0FBQ3ZELFFBQ0Usa0JBQWEsR0FBa0IsSUFBSSxLQUFLLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsQ0FBQztBQUMvRCxRQUFFLGlCQUFZLEdBQ1YsSUFBSSxDQUFDLE1BQU0sRUFBRTtBQUNqQixhQUFPLFFBQVEsQ0FBQyxFQUFFLENBQUM7QUFDbkIsYUFBTyxTQUFTLENBQUMsQ0FBQyxDQUFDLEdBQUcsSUFBSSxJQUFJLEVBQUUsQ0FBQyxPQUFPLEVBQUUsQ0FBQyxRQUFRLENBQUMsRUFBRSxDQUFDLENBQUM7QUFDeEQsSUFDMkMsQ0FBQztBQUM1QztBQUNPO0FBQ0k7QUFBUSxJQURqQixzQ0FBUTtBQUNSO0FBQW1CO0FBQVEsSUFEM0I7QUFDRCxRQUFHLElBQUksQ0FBQyxPQUFP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QUFFQSxBQUFBLEFBQ0EsQUFBQSxBQUNBLEFBQUEsQUFFQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQWlCQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBVkEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBRUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFFQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUVBLEFBQUEsQUFFQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBRUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBV0EsQUFWQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUNBLEFBQ0EsQUFDQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBRUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBR0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBRUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQ0EsQUFBQSxBQUVBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFDQSxBQUFBLEFBRUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFDQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQ0EsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFDQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFDQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFFQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFFQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQ0EsQUFBQSxBQUVBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFDQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUNBLEFBQUEsQUFFQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUNBLEFBQUEsQUFFQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBd0JBLEFBdkJBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUNBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQ0EsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFDQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFHQSxBQUFBLEFBQUEsQUFBQSxBQVFBLEFBUEEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUVBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQ0EsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQ0EsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQTdMQSxBQUFBLEFBQUEsQUFFQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFFQSxBQVBBLEFBQUEsQUFTQSxBQUFBLEFBRUEsQUFBQSxBQXFMQSxBQUFBLEFBQUEsQUE5TEEsQUE4TEEsQUF4TEEsQUFBQSxBQUNBLEFBQUEsQUFFQSxBQUFBLEFBQ0EsQUFBQSxBQUNBLEFBQUEsQUFDQSxBQUdBLEFBQ0EsQUFBQSxBQUNBLEFBQUEiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge1xyXG4gIENvbXBvbmVudCxcclxuICBPbkluaXQsXHJcbiAgSW5wdXQsXHJcbiAgT3V0cHV0LFxyXG4gIEV2ZW50RW1pdHRlcixcclxuICBBZnRlclZpZXdJbml0XHJcbn0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XHJcbmltcG9ydCB7IEZvcm1Hcm91cCwgRm9ybUNvbnRyb2wgfSBmcm9tICdAYW5ndWxhci9mb3Jtcyc7XHJcbmltcG9ydCB7IEtleXNQaXBlIH0gZnJvbSAnLi4vLi4vcGlwZXMva2V5cy5waXBlJztcclxuaW1wb3J0IHsgQ29uZmlnIH0gZnJvbSAnLi4vLi4vbW9kZWxzL2NvbmZpZyc7XHJcbkBDb21wb25lbnQoe1xyXG4gIC8vIHRzbGludDpkaXNhYmxlLW5leHQtbGluZTogY29tcG9uZW50LXNlbGVjdG9yXHJcbiAgc2VsZWN0b3I6ICduZy1vdHAtaW5wdXQnLFxyXG4gIHRlbXBsYXRlVXJsOiAnLi9uZy1vdHAtaW5wdXQuY29tcG9uZW50Lmh0bWwnLFxyXG4gIHN0eWxlVXJsczogWycuL25nLW90cC1pbnB1dC5jb21wb25lbnQuc2NzcyddXHJcbn0pXHJcbmV4cG9ydCBjbGFzcyBOZ090cElucHV0Q29tcG9uZW50IGltcGxlbWVudHMgT25Jbml0LCBBZnRlclZpZXdJbml0IHtcclxuICBASW5wdXQoKSBjb25maWc6IENvbmZpZyA9IHsgbGVuZ3RoOiA0IH07XHJcbiAgLy8gdHNsaW50OmRpc2FibGUtbmV4dC1saW5lOiBuby1vdXRwdXQtb24tcHJlZml4XHJcbiAgQE91dHB1dCgpIG9uSW5wdXRDaGFuZ2UgPSBuZXcgRXZlbnRFbWl0dGVyPHN0cmluZz4oKTtcclxuICBvdHBGb3JtOiBGb3JtR3JvdXA7XHJcbiAgaW5wdXRDb250cm9sczogRm9ybUNvbnRyb2xbXSA9IG5ldyBBcnJheSh0aGlzLmNvbmZpZy5sZW5ndGgpO1xyXG4gIGNvbXBvbmVudEtleSA9XHJcbiAgICBNYXRoLnJhbmRvbSgpXHJcbiAgICAgIC50b1N0cmluZygzNilcclxuICAgICAgLnN1YnN0cmluZygyKSArIG5ldyBEYXRlKCkuZ2V0VGltZSgpLnRvU3RyaW5nKDM2KTtcclxuICBpbnB1dFR5cGU6IHN0cmluZztcclxuICBjb25zdHJ1Y3Rvcihwcml2YXRlIGtleXNQaXBlOiBLZXlzUGlwZSkge31cclxuXHJcbiAgbmdPbkluaXQoKSB7XHJcbiAgICB0aGlzLm90cEZvcm0gPSBuZXcgRm9ybUdyb3VwKHt9KTtcclxuICAgIGZvciAobGV0IGluZGV4ID0gMDsgaW5kZXggPCB0aGlzLmNvbmZpZy5sZW5ndGg7IGluZGV4KyspIHtcclxuICAgICAgdGhpcy5vdHBGb3JtLmFkZENvbnRyb2wodGhpcy5nZXRDb250cm9sTmFtZShpbmRleCksIG5ldyBGb3JtQ29udHJvbCgpKTtcclxuICAgIH1cclxuICAgIHRoaXMuaW5wdXRUeXBlID0gdGhpcy5nZXRJbnB1dFR5cGUoKTtcclxuICAgIFxyXG4gIH1cclxuICBuZ0FmdGVyVmlld0luaXQoKTogdm9pZCB7XHJcbiAgICBpZiAoIXRoaXMuY29uZmlnLmRpc2FibGVBdXRvRm9jdXMpIHtcclxuICAgICAgY29uc3QgY29udGFpbmVySXRlbSA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKGBjXyR7dGhpcy5jb21wb25lbnRLZXl9YCk7XHJcbiAgICAgIGlmIChjb250YWluZXJJdGVtKSB7XHJcbiAgICAgICAgY29udGFpbmVySXRlbS5hZGRFdmVudExpc3RlbmVyKCdwYXN0ZScsIChldnQpID0+IHRoaXMuaGFuZGxlUGFzdGUoZXZ0KSk7XHJcbiAgICAgICAgY29uc3QgZWxlOiBhbnkgPSBjb250YWluZXJJdGVtLmdldEVsZW1lbnRzQnlDbGFzc05hbWUoJ290cC1pbnB1dCcpWzBdO1xyXG4gICAgICAgIGlmIChlbGUgJiYgZWxlLmZvY3VzKSB7XHJcbiAgICAgICAgICBlbGUuZm9jdXMoKTtcclxuICAgICAgICB9XHJcbiAgICAgIH1cclxuICAgIH1cclxuICB9XHJcbiAgcHJpdmF0ZSBnZXRDb250cm9sTmFtZShpZHgpIHtcclxuICAgIHJldHVybiBgY3RybF8ke2lkeH1gO1xyXG4gIH1cclxuXHJcbiAgaWZMZWZ0QXJyb3coZXZlbnQpIHtcclxuICAgIHJldHVybiB0aGlzLmlmS2V5Q29kZShldmVudCwgMzcpO1xyXG4gIH1cclxuXHJcblxyXG4gIGlmUmlnaHRBcnJvdyhldmVudCkge1xyXG4gICAgcmV0dXJuIHRoaXMuaWZLZXlDb2RlKGV2ZW50LCAzOSk7XHJcbiAgfVxyXG5cclxuICBpZkJhY2tzcGFjZU9yRGVsZXRlKGV2ZW50KSB7XHJcbiAgICByZXR1cm4gKFxyXG4gICAgICBldmVudC5rZXkgPT09ICdCYWNrc3BhY2UnIHx8XHJcbiAgICAgIGV2ZW50LmtleSA9PT0gJ0RlbGV0ZScgfHxcclxuICAgICAgdGhpcy5pZktleUNvZGUoZXZlbnQsIDgpIHx8XHJcbiAgICAgIHRoaXMuaWZLZXlDb2RlKGV2ZW50LCA0NilcclxuICAgICk7XHJcbiAgfVxyXG5cclxuICBpZktleUNvZGUoZXZlbnQsIHRhcmdldENvZGUpIHtcclxuICAgIGNvbnN0IGtleSA9IGV2ZW50LmtleUNvZGUgfHwgZXZlbnQuY2hhckNvZGU7XHJcbiAgICAvLyB0c2xpbnQ6ZGlzYWJsZS1uZXh0LWxpbmU6IHRyaXBsZS1lcXVhbHNcclxuICAgIHJldHVybiBrZXkgPT0gdGFyZ2V0Q29kZSA/IHRydWUgOiBmYWxzZTtcclxuICB9XHJcbiAgb25LZXlEb3duKCRldmVudCkge1xyXG4gICAgdmFyIGlzU3BhY2U9dGhpcy5pZktleUNvZGUoJGV2ZW50LDMyKVxyXG4gICAgaWYgKGlzU3BhY2UpIHsvLyBwcmV2ZW50IHNwYWNlXHJcbiAgICByZXR1cm4gZmFsc2U7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICBvbktleVVwKCRldmVudCwgaW5wdXRJZHgpIHtcclxuICAgIGNvbnN0IG5leHRJbnB1dElkID0gdGhpcy5hcHBlbmRLZXkoYG90cF8ke2lucHV0SWR4ICsgMX1gKTtcclxuICAgIGNvbnN0IHByZXZJbnB1dElkID0gdGhpcy5hcHBlbmRLZXkoYG90cF8ke2lucHV0SWR4IC0gMX1gKTtcclxuICAgIGlmICh0aGlzLmlmUmlnaHRBcnJvdygkZXZlbnQpKSB7XHJcbiAgICAgIHRoaXMuc2V0U2VsZWN0ZWQobmV4dElucHV0SWQpO1xyXG4gICAgICByZXR1cm47XHJcbiAgICB9XHJcbiAgICBpZiAodGhpcy5pZkxlZnRBcnJvdygkZXZlbnQpKSB7XHJcbiAgICAgIHRoaXMuc2V0U2VsZWN0ZWQocHJldklucHV0SWQpO1xyXG4gICAgICByZXR1cm47XHJcbiAgICB9XHJcbiAgICBjb25zdCBpc0JhY2tzcGFjZSA9IHRoaXMuaWZCYWNrc3BhY2VPckRlbGV0ZSgkZXZlbnQpO1xyXG4gICAgaWYgKGlzQmFja3NwYWNlICYmICEkZXZlbnQudGFyZ2V0LnZhbHVlKSB7XHJcbiAgICAgIHRoaXMuc2V0U2VsZWN0ZWQocHJldklucHV0SWQpO1xyXG4gICAgICB0aGlzLnJlYnVpbGRWYWx1ZSgpO1xyXG4gICAgICByZXR1cm47XHJcbiAgICB9XHJcbiAgICBpZiAoISRldmVudC50YXJnZXQudmFsdWUpIHtcclxuICAgICAgcmV0dXJuO1xyXG4gICAgfVxyXG4gICAgaWYgKHRoaXMuaWZWYWxpZEVudHJ5KCRldmVudCkpIHtcclxuICAgICAgdGhpcy5zZXRTZWxlY3RlZChuZXh0SW5wdXRJZCk7XHJcbiAgICB9XHJcbiAgICB0aGlzLnJlYnVpbGRWYWx1ZSgpO1xyXG4gIH1cclxuXHJcbiAgYXBwZW5kS2V5KGlkKSB7XHJcbiAgICByZXR1cm4gYCR7aWR9XyR7dGhpcy5jb21wb25lbnRLZXl9YDtcclxuICB9XHJcblxyXG4gIHNldFNlbGVjdGVkKGVsZUlkKSB7XHJcbiAgICB0aGlzLmZvY3VzVG8oZWxlSWQpO1xyXG4gICAgY29uc3QgZWxlOiBhbnkgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChlbGVJZCk7XHJcbiAgICBpZiAoZWxlICYmIGVsZS5zZXRTZWxlY3Rpb25SYW5nZSkge1xyXG4gICAgICBzZXRUaW1lb3V0KCgpID0+IHtcclxuICAgICAgICBlbGUuc2V0U2VsZWN0aW9uUmFuZ2UoMCwgMSk7XHJcbiAgICAgIH0sIDApO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgaWZWYWxpZEVudHJ5KGV2ZW50KSB7XHJcbiAgICBjb25zdCBpbnAgPSBTdHJpbmcuZnJvbUNoYXJDb2RlKGV2ZW50LmtleUNvZGUpO1xyXG4gICAgY29uc3QgaXNNb2JpbGUgPSAvaVBob25lfGlQYWR8aVBvZHxBbmRyb2lkL2kudGVzdChuYXZpZ2F0b3IudXNlckFnZW50KTtcclxuICAgIHJldHVybiAoXHJcbiAgICAgIGlzTW9iaWxlIHx8XHJcbiAgICAgIC9bYS16QS1aMC05LV9dLy50ZXN0KGlucCkgfHxcclxuICAgICAgKHRoaXMuY29uZmlnLmFsbG93S2V5Q29kZXMgJiZcclxuICAgICAgICB0aGlzLmNvbmZpZy5hbGxvd0tleUNvZGVzLmluY2x1ZGVzKGV2ZW50LmtleUNvZGUpKSB8fFxyXG4gICAgICAoZXZlbnQua2V5Q29kZSA+PSA5NiAmJiBldmVudC5rZXlDb2RlIDw9IDEwNSlcclxuICAgICk7XHJcbiAgfVxyXG5cclxuICBmb2N1c1RvKGVsZUlkKSB7XHJcbiAgICBjb25zdCBlbGU6IGFueSA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKGVsZUlkKTtcclxuICAgIGlmIChlbGUpIHtcclxuICAgICAgZWxlLmZvY3VzKCk7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICAvLyBtZXRob2QgdG8gc2V0IGNvbXBvbmVudCB2YWx1ZVxyXG4gIHNldFZhbHVlKHZhbHVlOiBhbnkpIHtcclxuICAgIGlmICh0aGlzLmNvbmZpZy5hbGxvd051bWJlcnNPbmx5ICYmIGlzTmFOKHZhbHVlKSkge1xyXG4gICAgICAgIHJldHVybjtcclxuICAgIH1cclxuICAgIHRoaXMub3RwRm9ybS5yZXNldCgpO1xyXG4gICAgIGlmICghdmFsdWUpIHtcclxuICAgICAgIHRoaXMucmVidWlsZFZhbHVlKCk7XHJcbiAgICAgICByZXR1cm47XHJcbiAgICAgfVxyXG4gICAgIHZhbHVlID0gdmFsdWUudG9TdHJpbmcoKS5yZXBsYWNlKC9cXHMvZywgJycpOyAvLyByZW1vdmUgd2hpdGVzcGFjZVxyXG4gICAgIEFycmF5LmZyb20odmFsdWUpLmZvckVhY2goKGMsIGlkeCkgPT4ge1xyXG4gICAgICAgICAgaWYgKHRoaXMub3RwRm9ybS5nZXQodGhpcy5nZXRDb250cm9sTmFtZShpZHgpKSkge1xyXG4gICAgICAgICAgICB0aGlzLm90cEZvcm0uZ2V0KHRoaXMuZ2V0Q29udHJvbE5hbWUoaWR4KSkuc2V0VmFsdWUoYyk7XHJcbiAgICAgICAgICB9XHJcbiAgICAgfSk7XHJcbiAgICAgaWYgKCF0aGlzLmNvbmZpZy5kaXNhYmxlQXV0b0ZvY3VzKSB7XHJcbiAgICAgIGNvbnN0IGNvbnRhaW5lckl0ZW0gPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChgY18ke3RoaXMuY29tcG9uZW50S2V5fWApO1xyXG4gICAgICB2YXIgaW5kZXhPZkVsZW1lbnRUb0ZvY3VzID0gdmFsdWUubGVuZ3RoIDwgdGhpcy5jb25maWcubGVuZ3RoID8gdmFsdWUubGVuZ3RoIDogKHRoaXMuY29uZmlnLmxlbmd0aCAtIDEpO1xyXG4gICAgICBsZXQgZWxlIDogYW55ID0gY29udGFpbmVySXRlbS5nZXRFbGVtZW50c0J5Q2xhc3NOYW1lKCdvdHAtaW5wdXQnKVtpbmRleE9mRWxlbWVudFRvRm9jdXNdO1xyXG4gICAgICBpZiAoZWxlICYmIGVsZS5mb2N1cykge1xyXG4gICAgICAgIGVsZS5mb2N1cygpO1xyXG4gICAgICB9XHJcbiAgICAgfVxyXG4gICAgIHRoaXMucmVidWlsZFZhbHVlKCk7XHJcbiAgfVxyXG5cclxuXHJcbiAgcmVidWlsZFZhbHVlKCkge1xyXG4gICAgbGV0IHZhbCA9ICcnO1xyXG4gICAgdGhpcy5rZXlzUGlwZS50cmFuc2Zvcm0odGhpcy5vdHBGb3JtLmNvbnRyb2xzKS5mb3JFYWNoKGsgPT4ge1xyXG4gICAgICBpZiAodGhpcy5vdHBGb3JtLmNvbnRyb2xzW2tdLnZhbHVlKSB7XHJcbiAgICAgICAgdmFsICs9IHRoaXMub3RwRm9ybS5jb250cm9sc1trXS52YWx1ZTtcclxuICAgICAgfVxyXG4gICAgfSk7XHJcbiAgICB0aGlzLm9uSW5wdXRDaGFuZ2UuZW1pdCh2YWwpO1xyXG4gIH1cclxuICBnZXRJbnB1dFR5cGUoKTpzdHJpbmd7XHJcbiAgICByZXR1cm4gdGhpcy5jb25maWcuaXNQYXNzd29yZElucHV0IFxyXG4gICAgICA/ICdwYXNzd29yZCcgXHJcbiAgICAgIDogdGhpcy5jb25maWcuYWxsb3dOdW1iZXJzT25seSBcclxuICAgICAgICA/ICd0ZWwnXHJcbiAgICAgICAgOiAndGV4dCc7XHJcbiAgfVxyXG4gIGhhbmRsZVBhc3RlKGUpIHtcclxuICAgIC8vIEdldCBwYXN0ZWQgZGF0YSB2aWEgY2xpcGJvYXJkIEFQSVxyXG4gICAgbGV0IGNsaXBib2FyZERhdGEgPSBlLmNsaXBib2FyZERhdGEgfHwgd2luZG93WydjbGlwYm9hcmREYXRhJ107XHJcbiAgICBpZihjbGlwYm9hcmREYXRhKXtcclxuICAgICB2YXIgcGFzdGVkRGF0YSA9Y2xpcGJvYXJkRGF0YS5nZXREYXRhKCdUZXh0Jyk7XHJcbiAgICB9XHJcbiAgICAvLyBTdG9wIGRhdGEgYWN0dWFsbHkgYmVpbmcgcGFzdGVkIGludG8gZGl2XHJcbiAgICBlLnN0b3BQcm9wYWdhdGlvbigpO1xyXG4gICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xyXG4gICAgaWYgKCFwYXN0ZWREYXRhKSB7XHJcbiAgICAgIHJldHVybjtcclxuICAgIH1cclxuICAgIHRoaXMuc2V0VmFsdWUocGFzdGVkRGF0YSk7XHJcbiAgfVxyXG59XHJcbiJdfQ==