/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Directive, ElementRef, Renderer2, Input } from '@angular/core';
import * as ɵngcc0 from '@angular/core';
var NumberOnlyDirective = /** @class */ (function () {
    function NumberOnlyDirective(_elRef, _renderer) {
        this._elRef = _elRef;
        this._renderer = _renderer;
    }
    /**
     * @return {?}
     */
    NumberOnlyDirective.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        if (!this.disabledNumberOnly) {
            this._renderer.setAttribute(this._elRef.nativeElement, 'onkeypress', 'return (event.charCode >= 48 && event.charCode <= 57) || event.charCode == 0');
        }
    };
    /** @nocollapse */
    NumberOnlyDirective.ctorParameters = function () { return [
        { type: ElementRef },
        { type: Renderer2 }
    ]; };
    NumberOnlyDirective.propDecorators = {
        disabledNumberOnly: [{ type: Input }]
    };
NumberOnlyDirective.ɵfac = function NumberOnlyDirective_Factory(t) { return new (t || NumberOnlyDirective)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.Renderer2)); };
NumberOnlyDirective.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: NumberOnlyDirective, selectors: [["", "numberOnly", ""]], inputs: { disabledNumberOnly: "disabledNumberOnly" } });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(NumberOnlyDirective, [{
        type: Directive,
        args: [{
                selector: '[numberOnly]'
            }]
    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: ɵngcc0.Renderer2 }]; }, { disabledNumberOnly: [{
            type: Input
        }] }); })();
    return NumberOnlyDirective;
}());
export { NumberOnlyDirective };
if (false) {
    /** @type {?} */
    NumberOnlyDirective.prototype.disabledNumberOnly;
    /**
     * @type {?}
     * @private
     */
    NumberOnlyDirective.prototype._elRef;
    /**
     * @type {?}
     * @private
     */
    NumberOnlyDirective.prototype._renderer;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibnVtYmVyLW9ubHkuZGlyZWN0aXZlLmpzIiwic291cmNlcyI6WyJuZzovbmctb3RwLWlucHV0L2xpYi9kaXJlY3RpdmVzL251bWJlci1vbmx5LmRpcmVjdGl2ZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O0FBQUEsT0FBTyxFQUFFLFNBQVMsRUFBRSxVQUFVLEVBQUUsU0FBUyxFQUFFLEtBQUssRUFBRSxNQUFNLGVBQWUsQ0FBQzs7QUFFeEU7QUFHWSxJQUVWLDZCQUFxQixNQUFrQixFQUFVLFNBQW9CO0FBQUksUUFBcEQsV0FBTSxHQUFOLE1BQU0sQ0FBWTtBQUFDLFFBQVMsY0FBUyxHQUFULFNBQVMsQ0FBVztBQUFDLElBQUcsQ0FBQztBQUM1RTtBQUNPO0FBQ0k7QUFBUSxJQURqQixzQ0FBUTtBQUNSO0FBQW1CO0FBQVEsSUFEM0I7QUFDRCxRQUFHLElBQUcsQ0FBQyxJQUFJLENBQUMsa0JBQWtCLEVBQUM7QUFDaEMsWUFBTSxJQUFJLENBQUMsU0FBUyxDQUFDLFlBQVksQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLGFBQWEsRUFBRSxZQUFZLEVBQUUsOEVBQThFLENBQUMsQ0FBQztBQUMzSixTQUFLO0FBQ0wsSUFBRSxDQUFDLENBUk07QUFBQztnQ0FIVCxTQUFTLFNBQUMsbERBR3NCO1FBRi9CLFFBQVEsRUFBRSxsQkFJVyxnQkFQSCxVQUFVO0VBR0osa0JBQ3pCLHBCQUppQyxnQkFBRixTQUFTO0FBQUc7QUFBVTtBQUc1QyxxQ0FHUCxLQUFLO0FBQUk7Ozs7Ozs7Ozs7b0JBQU07QUFBQyxJQVNuQiwwQkFBQztBQUFFLENBQUYsQUFiRCxJQWFDO0FBQUMsU0FWVyxtQkFBbUI7QUFDL0I7QUFBYTtBQUFxQixJQUFqQyxpREFBb0M7QUFDdEM7QUFBUTtBQUFpQjtBQUFnQjtBQUFRLElBQWxDLHFDQUEwQjtBQUFDO0FBQVE7QUFBaUI7QUFFOUQ7QUFBUSxJQUY4Qix3Q0FBNEI7O0FBUEEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUVBLEFBS0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUVBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFDQSxBQUFBLEFBWEEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUpBLEFBQUEsQUFBQSxBQUFBLEFBTUEsQUFBQSxBQVNBLEFBQUEsQUFBQSxBQWJBLEFBYUEsQUFWQSxBQUFBLEFBQ0EsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgRGlyZWN0aXZlLCBFbGVtZW50UmVmLCBSZW5kZXJlcjIsIElucHV0IH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XHJcblxyXG5ARGlyZWN0aXZlKHtcclxuICBzZWxlY3RvcjogJ1tudW1iZXJPbmx5XSdcclxufSlcclxuZXhwb3J0IGNsYXNzIE51bWJlck9ubHlEaXJlY3RpdmUge1xyXG4gIEBJbnB1dCgpIGRpc2FibGVkTnVtYmVyT25seTpib29sZWFuO1xyXG4gIGNvbnN0cnVjdG9yIChwcml2YXRlIF9lbFJlZjogRWxlbWVudFJlZiwgcHJpdmF0ZSBfcmVuZGVyZXI6IFJlbmRlcmVyMikgeyB9XHJcblxyXG4gIG5nT25Jbml0KCkge1xyXG4gICAgaWYoIXRoaXMuZGlzYWJsZWROdW1iZXJPbmx5KXtcclxuICAgICAgdGhpcy5fcmVuZGVyZXIuc2V0QXR0cmlidXRlKHRoaXMuX2VsUmVmLm5hdGl2ZUVsZW1lbnQsICdvbmtleXByZXNzJywgJ3JldHVybiAoZXZlbnQuY2hhckNvZGUgPj0gNDggJiYgZXZlbnQuY2hhckNvZGUgPD0gNTcpIHx8IGV2ZW50LmNoYXJDb2RlID09IDAnKTtcclxuICAgIH1cclxuICB9XHJcblxyXG59Il19